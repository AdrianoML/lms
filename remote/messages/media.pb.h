// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: media.proto

#ifndef PROTOBUF_media_2eproto__INCLUDED
#define PROTOBUF_media_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace Remote {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_media_2eproto();
void protobuf_AssignDesc_media_2eproto();
void protobuf_ShutdownFile_media_2eproto();

class MediaRequest;
class MediaRequest_Prepare;
class MediaRequest_Prepare_Audio;
class MediaRequest_Prepare_Video;
class MediaRequest_GetPart;
class MediaRequest_Terminate;
class MediaResponse;
class MediaResponse_PrepareResult;
class MediaResponse_PartResult;
class MediaResponse_TerminateResult;

enum MediaRequest_Prepare_AudioCodecType {
  MediaRequest_Prepare_AudioCodecType_AudioCodecTypeOGA = 1
};
bool MediaRequest_Prepare_AudioCodecType_IsValid(int value);
const MediaRequest_Prepare_AudioCodecType MediaRequest_Prepare_AudioCodecType_AudioCodecType_MIN = MediaRequest_Prepare_AudioCodecType_AudioCodecTypeOGA;
const MediaRequest_Prepare_AudioCodecType MediaRequest_Prepare_AudioCodecType_AudioCodecType_MAX = MediaRequest_Prepare_AudioCodecType_AudioCodecTypeOGA;
const int MediaRequest_Prepare_AudioCodecType_AudioCodecType_ARRAYSIZE = MediaRequest_Prepare_AudioCodecType_AudioCodecType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MediaRequest_Prepare_AudioCodecType_descriptor();
inline const ::std::string& MediaRequest_Prepare_AudioCodecType_Name(MediaRequest_Prepare_AudioCodecType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MediaRequest_Prepare_AudioCodecType_descriptor(), value);
}
inline bool MediaRequest_Prepare_AudioCodecType_Parse(
    const ::std::string& name, MediaRequest_Prepare_AudioCodecType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MediaRequest_Prepare_AudioCodecType>(
    MediaRequest_Prepare_AudioCodecType_descriptor(), name, value);
}
enum MediaRequest_Prepare_AudioBitrate {
  MediaRequest_Prepare_AudioBitrate_AudioBitrate_32_kbps = 1,
  MediaRequest_Prepare_AudioBitrate_AudioBitrate_64_kbps = 2,
  MediaRequest_Prepare_AudioBitrate_AudioBitrate_96_kbps = 3,
  MediaRequest_Prepare_AudioBitrate_AudioBitrate_128_kbps = 4,
  MediaRequest_Prepare_AudioBitrate_AudioBitrate_192_kbps = 5,
  MediaRequest_Prepare_AudioBitrate_AudioBitrate_256_kbps = 6
};
bool MediaRequest_Prepare_AudioBitrate_IsValid(int value);
const MediaRequest_Prepare_AudioBitrate MediaRequest_Prepare_AudioBitrate_AudioBitrate_MIN = MediaRequest_Prepare_AudioBitrate_AudioBitrate_32_kbps;
const MediaRequest_Prepare_AudioBitrate MediaRequest_Prepare_AudioBitrate_AudioBitrate_MAX = MediaRequest_Prepare_AudioBitrate_AudioBitrate_256_kbps;
const int MediaRequest_Prepare_AudioBitrate_AudioBitrate_ARRAYSIZE = MediaRequest_Prepare_AudioBitrate_AudioBitrate_MAX + 1;

const ::google::protobuf::EnumDescriptor* MediaRequest_Prepare_AudioBitrate_descriptor();
inline const ::std::string& MediaRequest_Prepare_AudioBitrate_Name(MediaRequest_Prepare_AudioBitrate value) {
  return ::google::protobuf::internal::NameOfEnum(
    MediaRequest_Prepare_AudioBitrate_descriptor(), value);
}
inline bool MediaRequest_Prepare_AudioBitrate_Parse(
    const ::std::string& name, MediaRequest_Prepare_AudioBitrate* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MediaRequest_Prepare_AudioBitrate>(
    MediaRequest_Prepare_AudioBitrate_descriptor(), name, value);
}
enum MediaRequest_Prepare_VideoCodecType {
  MediaRequest_Prepare_VideoCodecType_VideoCodecTypeOGV = 1
};
bool MediaRequest_Prepare_VideoCodecType_IsValid(int value);
const MediaRequest_Prepare_VideoCodecType MediaRequest_Prepare_VideoCodecType_VideoCodecType_MIN = MediaRequest_Prepare_VideoCodecType_VideoCodecTypeOGV;
const MediaRequest_Prepare_VideoCodecType MediaRequest_Prepare_VideoCodecType_VideoCodecType_MAX = MediaRequest_Prepare_VideoCodecType_VideoCodecTypeOGV;
const int MediaRequest_Prepare_VideoCodecType_VideoCodecType_ARRAYSIZE = MediaRequest_Prepare_VideoCodecType_VideoCodecType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MediaRequest_Prepare_VideoCodecType_descriptor();
inline const ::std::string& MediaRequest_Prepare_VideoCodecType_Name(MediaRequest_Prepare_VideoCodecType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MediaRequest_Prepare_VideoCodecType_descriptor(), value);
}
inline bool MediaRequest_Prepare_VideoCodecType_Parse(
    const ::std::string& name, MediaRequest_Prepare_VideoCodecType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MediaRequest_Prepare_VideoCodecType>(
    MediaRequest_Prepare_VideoCodecType_descriptor(), name, value);
}
enum MediaRequest_Prepare_VideoBitrate {
  MediaRequest_Prepare_VideoBitrate_VideoBitrate_512_kbps = 1
};
bool MediaRequest_Prepare_VideoBitrate_IsValid(int value);
const MediaRequest_Prepare_VideoBitrate MediaRequest_Prepare_VideoBitrate_VideoBitrate_MIN = MediaRequest_Prepare_VideoBitrate_VideoBitrate_512_kbps;
const MediaRequest_Prepare_VideoBitrate MediaRequest_Prepare_VideoBitrate_VideoBitrate_MAX = MediaRequest_Prepare_VideoBitrate_VideoBitrate_512_kbps;
const int MediaRequest_Prepare_VideoBitrate_VideoBitrate_ARRAYSIZE = MediaRequest_Prepare_VideoBitrate_VideoBitrate_MAX + 1;

const ::google::protobuf::EnumDescriptor* MediaRequest_Prepare_VideoBitrate_descriptor();
inline const ::std::string& MediaRequest_Prepare_VideoBitrate_Name(MediaRequest_Prepare_VideoBitrate value) {
  return ::google::protobuf::internal::NameOfEnum(
    MediaRequest_Prepare_VideoBitrate_descriptor(), value);
}
inline bool MediaRequest_Prepare_VideoBitrate_Parse(
    const ::std::string& name, MediaRequest_Prepare_VideoBitrate* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MediaRequest_Prepare_VideoBitrate>(
    MediaRequest_Prepare_VideoBitrate_descriptor(), name, value);
}
enum MediaRequest_Prepare_Type {
  MediaRequest_Prepare_Type_AudioRequest = 1,
  MediaRequest_Prepare_Type_VideoRequest = 2
};
bool MediaRequest_Prepare_Type_IsValid(int value);
const MediaRequest_Prepare_Type MediaRequest_Prepare_Type_Type_MIN = MediaRequest_Prepare_Type_AudioRequest;
const MediaRequest_Prepare_Type MediaRequest_Prepare_Type_Type_MAX = MediaRequest_Prepare_Type_VideoRequest;
const int MediaRequest_Prepare_Type_Type_ARRAYSIZE = MediaRequest_Prepare_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* MediaRequest_Prepare_Type_descriptor();
inline const ::std::string& MediaRequest_Prepare_Type_Name(MediaRequest_Prepare_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    MediaRequest_Prepare_Type_descriptor(), value);
}
inline bool MediaRequest_Prepare_Type_Parse(
    const ::std::string& name, MediaRequest_Prepare_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MediaRequest_Prepare_Type>(
    MediaRequest_Prepare_Type_descriptor(), name, value);
}
enum MediaRequest_Type {
  MediaRequest_Type_TypeMediaPrepare = 1,
  MediaRequest_Type_TypeMediaGetPart = 2,
  MediaRequest_Type_TypeMediaTerminate = 3
};
bool MediaRequest_Type_IsValid(int value);
const MediaRequest_Type MediaRequest_Type_Type_MIN = MediaRequest_Type_TypeMediaPrepare;
const MediaRequest_Type MediaRequest_Type_Type_MAX = MediaRequest_Type_TypeMediaTerminate;
const int MediaRequest_Type_Type_ARRAYSIZE = MediaRequest_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* MediaRequest_Type_descriptor();
inline const ::std::string& MediaRequest_Type_Name(MediaRequest_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    MediaRequest_Type_descriptor(), value);
}
inline bool MediaRequest_Type_Parse(
    const ::std::string& name, MediaRequest_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MediaRequest_Type>(
    MediaRequest_Type_descriptor(), name, value);
}
enum MediaResponse_Type {
  MediaResponse_Type_TypePrepareResult = 1,
  MediaResponse_Type_TypePartResult = 2,
  MediaResponse_Type_TypeTerminateResult = 3
};
bool MediaResponse_Type_IsValid(int value);
const MediaResponse_Type MediaResponse_Type_Type_MIN = MediaResponse_Type_TypePrepareResult;
const MediaResponse_Type MediaResponse_Type_Type_MAX = MediaResponse_Type_TypeTerminateResult;
const int MediaResponse_Type_Type_ARRAYSIZE = MediaResponse_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* MediaResponse_Type_descriptor();
inline const ::std::string& MediaResponse_Type_Name(MediaResponse_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    MediaResponse_Type_descriptor(), value);
}
inline bool MediaResponse_Type_Parse(
    const ::std::string& name, MediaResponse_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MediaResponse_Type>(
    MediaResponse_Type_descriptor(), name, value);
}
// ===================================================================

class MediaRequest_Prepare_Audio : public ::google::protobuf::Message {
 public:
  MediaRequest_Prepare_Audio();
  virtual ~MediaRequest_Prepare_Audio();

  MediaRequest_Prepare_Audio(const MediaRequest_Prepare_Audio& from);

  inline MediaRequest_Prepare_Audio& operator=(const MediaRequest_Prepare_Audio& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaRequest_Prepare_Audio& default_instance();

  void Swap(MediaRequest_Prepare_Audio* other);

  // implements Message ----------------------------------------------

  MediaRequest_Prepare_Audio* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaRequest_Prepare_Audio& from);
  void MergeFrom(const MediaRequest_Prepare_Audio& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 track_id = 1;
  inline bool has_track_id() const;
  inline void clear_track_id();
  static const int kTrackIdFieldNumber = 1;
  inline ::google::protobuf::int64 track_id() const;
  inline void set_track_id(::google::protobuf::int64 value);

  // required .Remote.MediaRequest.Prepare.AudioCodecType codec_type = 2;
  inline bool has_codec_type() const;
  inline void clear_codec_type();
  static const int kCodecTypeFieldNumber = 2;
  inline ::Remote::MediaRequest_Prepare_AudioCodecType codec_type() const;
  inline void set_codec_type(::Remote::MediaRequest_Prepare_AudioCodecType value);

  // required .Remote.MediaRequest.Prepare.AudioBitrate bitrate = 3;
  inline bool has_bitrate() const;
  inline void clear_bitrate();
  static const int kBitrateFieldNumber = 3;
  inline ::Remote::MediaRequest_Prepare_AudioBitrate bitrate() const;
  inline void set_bitrate(::Remote::MediaRequest_Prepare_AudioBitrate value);

  // optional uint32 stream_idx = 4;
  inline bool has_stream_idx() const;
  inline void clear_stream_idx();
  static const int kStreamIdxFieldNumber = 4;
  inline ::google::protobuf::uint32 stream_idx() const;
  inline void set_stream_idx(::google::protobuf::uint32 value);

  // optional uint32 offset_secs = 5;
  inline bool has_offset_secs() const;
  inline void clear_offset_secs();
  static const int kOffsetSecsFieldNumber = 5;
  inline ::google::protobuf::uint32 offset_secs() const;
  inline void set_offset_secs(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Remote.MediaRequest.Prepare.Audio)
 private:
  inline void set_has_track_id();
  inline void clear_has_track_id();
  inline void set_has_codec_type();
  inline void clear_has_codec_type();
  inline void set_has_bitrate();
  inline void clear_has_bitrate();
  inline void set_has_stream_idx();
  inline void clear_has_stream_idx();
  inline void set_has_offset_secs();
  inline void clear_has_offset_secs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 track_id_;
  int codec_type_;
  int bitrate_;
  ::google::protobuf::uint32 stream_idx_;
  ::google::protobuf::uint32 offset_secs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_media_2eproto();
  friend void protobuf_AssignDesc_media_2eproto();
  friend void protobuf_ShutdownFile_media_2eproto();

  void InitAsDefaultInstance();
  static MediaRequest_Prepare_Audio* default_instance_;
};
// -------------------------------------------------------------------

class MediaRequest_Prepare_Video : public ::google::protobuf::Message {
 public:
  MediaRequest_Prepare_Video();
  virtual ~MediaRequest_Prepare_Video();

  MediaRequest_Prepare_Video(const MediaRequest_Prepare_Video& from);

  inline MediaRequest_Prepare_Video& operator=(const MediaRequest_Prepare_Video& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaRequest_Prepare_Video& default_instance();

  void Swap(MediaRequest_Prepare_Video* other);

  // implements Message ----------------------------------------------

  MediaRequest_Prepare_Video* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaRequest_Prepare_Video& from);
  void MergeFrom(const MediaRequest_Prepare_Video& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 video_id = 1;
  inline bool has_video_id() const;
  inline void clear_video_id();
  static const int kVideoIdFieldNumber = 1;
  inline ::google::protobuf::int64 video_id() const;
  inline void set_video_id(::google::protobuf::int64 value);

  // required .Remote.MediaRequest.Prepare.VideoCodecType codec_type = 2;
  inline bool has_codec_type() const;
  inline void clear_codec_type();
  static const int kCodecTypeFieldNumber = 2;
  inline ::Remote::MediaRequest_Prepare_VideoCodecType codec_type() const;
  inline void set_codec_type(::Remote::MediaRequest_Prepare_VideoCodecType value);

  // required .Remote.MediaRequest.Prepare.AudioBitrate audio_bitrate = 3;
  inline bool has_audio_bitrate() const;
  inline void clear_audio_bitrate();
  static const int kAudioBitrateFieldNumber = 3;
  inline ::Remote::MediaRequest_Prepare_AudioBitrate audio_bitrate() const;
  inline void set_audio_bitrate(::Remote::MediaRequest_Prepare_AudioBitrate value);

  // required .Remote.MediaRequest.Prepare.VideoBitrate video_bitrate = 4;
  inline bool has_video_bitrate() const;
  inline void clear_video_bitrate();
  static const int kVideoBitrateFieldNumber = 4;
  inline ::Remote::MediaRequest_Prepare_VideoBitrate video_bitrate() const;
  inline void set_video_bitrate(::Remote::MediaRequest_Prepare_VideoBitrate value);

  // optional uint32 offset_secs = 5;
  inline bool has_offset_secs() const;
  inline void clear_offset_secs();
  static const int kOffsetSecsFieldNumber = 5;
  inline ::google::protobuf::uint32 offset_secs() const;
  inline void set_offset_secs(::google::protobuf::uint32 value);

  // optional uint32 audio_stream_idx = 6;
  inline bool has_audio_stream_idx() const;
  inline void clear_audio_stream_idx();
  static const int kAudioStreamIdxFieldNumber = 6;
  inline ::google::protobuf::uint32 audio_stream_idx() const;
  inline void set_audio_stream_idx(::google::protobuf::uint32 value);

  // optional uint32 video_stream_idx = 7;
  inline bool has_video_stream_idx() const;
  inline void clear_video_stream_idx();
  static const int kVideoStreamIdxFieldNumber = 7;
  inline ::google::protobuf::uint32 video_stream_idx() const;
  inline void set_video_stream_idx(::google::protobuf::uint32 value);

  // optional uint32 subtitle_stream_idx = 8;
  inline bool has_subtitle_stream_idx() const;
  inline void clear_subtitle_stream_idx();
  static const int kSubtitleStreamIdxFieldNumber = 8;
  inline ::google::protobuf::uint32 subtitle_stream_idx() const;
  inline void set_subtitle_stream_idx(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Remote.MediaRequest.Prepare.Video)
 private:
  inline void set_has_video_id();
  inline void clear_has_video_id();
  inline void set_has_codec_type();
  inline void clear_has_codec_type();
  inline void set_has_audio_bitrate();
  inline void clear_has_audio_bitrate();
  inline void set_has_video_bitrate();
  inline void clear_has_video_bitrate();
  inline void set_has_offset_secs();
  inline void clear_has_offset_secs();
  inline void set_has_audio_stream_idx();
  inline void clear_has_audio_stream_idx();
  inline void set_has_video_stream_idx();
  inline void clear_has_video_stream_idx();
  inline void set_has_subtitle_stream_idx();
  inline void clear_has_subtitle_stream_idx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 video_id_;
  int codec_type_;
  int audio_bitrate_;
  int video_bitrate_;
  ::google::protobuf::uint32 offset_secs_;
  ::google::protobuf::uint32 audio_stream_idx_;
  ::google::protobuf::uint32 video_stream_idx_;
  ::google::protobuf::uint32 subtitle_stream_idx_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_media_2eproto();
  friend void protobuf_AssignDesc_media_2eproto();
  friend void protobuf_ShutdownFile_media_2eproto();

  void InitAsDefaultInstance();
  static MediaRequest_Prepare_Video* default_instance_;
};
// -------------------------------------------------------------------

class MediaRequest_Prepare : public ::google::protobuf::Message {
 public:
  MediaRequest_Prepare();
  virtual ~MediaRequest_Prepare();

  MediaRequest_Prepare(const MediaRequest_Prepare& from);

  inline MediaRequest_Prepare& operator=(const MediaRequest_Prepare& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaRequest_Prepare& default_instance();

  void Swap(MediaRequest_Prepare* other);

  // implements Message ----------------------------------------------

  MediaRequest_Prepare* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaRequest_Prepare& from);
  void MergeFrom(const MediaRequest_Prepare& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MediaRequest_Prepare_Audio Audio;
  typedef MediaRequest_Prepare_Video Video;

  typedef MediaRequest_Prepare_AudioCodecType AudioCodecType;
  static const AudioCodecType AudioCodecTypeOGA = MediaRequest_Prepare_AudioCodecType_AudioCodecTypeOGA;
  static inline bool AudioCodecType_IsValid(int value) {
    return MediaRequest_Prepare_AudioCodecType_IsValid(value);
  }
  static const AudioCodecType AudioCodecType_MIN =
    MediaRequest_Prepare_AudioCodecType_AudioCodecType_MIN;
  static const AudioCodecType AudioCodecType_MAX =
    MediaRequest_Prepare_AudioCodecType_AudioCodecType_MAX;
  static const int AudioCodecType_ARRAYSIZE =
    MediaRequest_Prepare_AudioCodecType_AudioCodecType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AudioCodecType_descriptor() {
    return MediaRequest_Prepare_AudioCodecType_descriptor();
  }
  static inline const ::std::string& AudioCodecType_Name(AudioCodecType value) {
    return MediaRequest_Prepare_AudioCodecType_Name(value);
  }
  static inline bool AudioCodecType_Parse(const ::std::string& name,
      AudioCodecType* value) {
    return MediaRequest_Prepare_AudioCodecType_Parse(name, value);
  }

  typedef MediaRequest_Prepare_AudioBitrate AudioBitrate;
  static const AudioBitrate AudioBitrate_32_kbps = MediaRequest_Prepare_AudioBitrate_AudioBitrate_32_kbps;
  static const AudioBitrate AudioBitrate_64_kbps = MediaRequest_Prepare_AudioBitrate_AudioBitrate_64_kbps;
  static const AudioBitrate AudioBitrate_96_kbps = MediaRequest_Prepare_AudioBitrate_AudioBitrate_96_kbps;
  static const AudioBitrate AudioBitrate_128_kbps = MediaRequest_Prepare_AudioBitrate_AudioBitrate_128_kbps;
  static const AudioBitrate AudioBitrate_192_kbps = MediaRequest_Prepare_AudioBitrate_AudioBitrate_192_kbps;
  static const AudioBitrate AudioBitrate_256_kbps = MediaRequest_Prepare_AudioBitrate_AudioBitrate_256_kbps;
  static inline bool AudioBitrate_IsValid(int value) {
    return MediaRequest_Prepare_AudioBitrate_IsValid(value);
  }
  static const AudioBitrate AudioBitrate_MIN =
    MediaRequest_Prepare_AudioBitrate_AudioBitrate_MIN;
  static const AudioBitrate AudioBitrate_MAX =
    MediaRequest_Prepare_AudioBitrate_AudioBitrate_MAX;
  static const int AudioBitrate_ARRAYSIZE =
    MediaRequest_Prepare_AudioBitrate_AudioBitrate_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AudioBitrate_descriptor() {
    return MediaRequest_Prepare_AudioBitrate_descriptor();
  }
  static inline const ::std::string& AudioBitrate_Name(AudioBitrate value) {
    return MediaRequest_Prepare_AudioBitrate_Name(value);
  }
  static inline bool AudioBitrate_Parse(const ::std::string& name,
      AudioBitrate* value) {
    return MediaRequest_Prepare_AudioBitrate_Parse(name, value);
  }

  typedef MediaRequest_Prepare_VideoCodecType VideoCodecType;
  static const VideoCodecType VideoCodecTypeOGV = MediaRequest_Prepare_VideoCodecType_VideoCodecTypeOGV;
  static inline bool VideoCodecType_IsValid(int value) {
    return MediaRequest_Prepare_VideoCodecType_IsValid(value);
  }
  static const VideoCodecType VideoCodecType_MIN =
    MediaRequest_Prepare_VideoCodecType_VideoCodecType_MIN;
  static const VideoCodecType VideoCodecType_MAX =
    MediaRequest_Prepare_VideoCodecType_VideoCodecType_MAX;
  static const int VideoCodecType_ARRAYSIZE =
    MediaRequest_Prepare_VideoCodecType_VideoCodecType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VideoCodecType_descriptor() {
    return MediaRequest_Prepare_VideoCodecType_descriptor();
  }
  static inline const ::std::string& VideoCodecType_Name(VideoCodecType value) {
    return MediaRequest_Prepare_VideoCodecType_Name(value);
  }
  static inline bool VideoCodecType_Parse(const ::std::string& name,
      VideoCodecType* value) {
    return MediaRequest_Prepare_VideoCodecType_Parse(name, value);
  }

  typedef MediaRequest_Prepare_VideoBitrate VideoBitrate;
  static const VideoBitrate VideoBitrate_512_kbps = MediaRequest_Prepare_VideoBitrate_VideoBitrate_512_kbps;
  static inline bool VideoBitrate_IsValid(int value) {
    return MediaRequest_Prepare_VideoBitrate_IsValid(value);
  }
  static const VideoBitrate VideoBitrate_MIN =
    MediaRequest_Prepare_VideoBitrate_VideoBitrate_MIN;
  static const VideoBitrate VideoBitrate_MAX =
    MediaRequest_Prepare_VideoBitrate_VideoBitrate_MAX;
  static const int VideoBitrate_ARRAYSIZE =
    MediaRequest_Prepare_VideoBitrate_VideoBitrate_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VideoBitrate_descriptor() {
    return MediaRequest_Prepare_VideoBitrate_descriptor();
  }
  static inline const ::std::string& VideoBitrate_Name(VideoBitrate value) {
    return MediaRequest_Prepare_VideoBitrate_Name(value);
  }
  static inline bool VideoBitrate_Parse(const ::std::string& name,
      VideoBitrate* value) {
    return MediaRequest_Prepare_VideoBitrate_Parse(name, value);
  }

  typedef MediaRequest_Prepare_Type Type;
  static const Type AudioRequest = MediaRequest_Prepare_Type_AudioRequest;
  static const Type VideoRequest = MediaRequest_Prepare_Type_VideoRequest;
  static inline bool Type_IsValid(int value) {
    return MediaRequest_Prepare_Type_IsValid(value);
  }
  static const Type Type_MIN =
    MediaRequest_Prepare_Type_Type_MIN;
  static const Type Type_MAX =
    MediaRequest_Prepare_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    MediaRequest_Prepare_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return MediaRequest_Prepare_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return MediaRequest_Prepare_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return MediaRequest_Prepare_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .Remote.MediaRequest.Prepare.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Remote::MediaRequest_Prepare_Type type() const;
  inline void set_type(::Remote::MediaRequest_Prepare_Type value);

  // optional .Remote.MediaRequest.Prepare.Audio audio = 2;
  inline bool has_audio() const;
  inline void clear_audio();
  static const int kAudioFieldNumber = 2;
  inline const ::Remote::MediaRequest_Prepare_Audio& audio() const;
  inline ::Remote::MediaRequest_Prepare_Audio* mutable_audio();
  inline ::Remote::MediaRequest_Prepare_Audio* release_audio();
  inline void set_allocated_audio(::Remote::MediaRequest_Prepare_Audio* audio);

  // optional .Remote.MediaRequest.Prepare.Video video = 3;
  inline bool has_video() const;
  inline void clear_video();
  static const int kVideoFieldNumber = 3;
  inline const ::Remote::MediaRequest_Prepare_Video& video() const;
  inline ::Remote::MediaRequest_Prepare_Video* mutable_video();
  inline ::Remote::MediaRequest_Prepare_Video* release_video();
  inline void set_allocated_video(::Remote::MediaRequest_Prepare_Video* video);

  // @@protoc_insertion_point(class_scope:Remote.MediaRequest.Prepare)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_audio();
  inline void clear_has_audio();
  inline void set_has_video();
  inline void clear_has_video();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Remote::MediaRequest_Prepare_Audio* audio_;
  ::Remote::MediaRequest_Prepare_Video* video_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_media_2eproto();
  friend void protobuf_AssignDesc_media_2eproto();
  friend void protobuf_ShutdownFile_media_2eproto();

  void InitAsDefaultInstance();
  static MediaRequest_Prepare* default_instance_;
};
// -------------------------------------------------------------------

class MediaRequest_GetPart : public ::google::protobuf::Message {
 public:
  MediaRequest_GetPart();
  virtual ~MediaRequest_GetPart();

  MediaRequest_GetPart(const MediaRequest_GetPart& from);

  inline MediaRequest_GetPart& operator=(const MediaRequest_GetPart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaRequest_GetPart& default_instance();

  void Swap(MediaRequest_GetPart* other);

  // implements Message ----------------------------------------------

  MediaRequest_GetPart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaRequest_GetPart& from);
  void MergeFrom(const MediaRequest_GetPart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 handle = 1;
  inline bool has_handle() const;
  inline void clear_handle();
  static const int kHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 handle() const;
  inline void set_handle(::google::protobuf::uint32 value);

  // required uint32 requested_data_size = 2;
  inline bool has_requested_data_size() const;
  inline void clear_requested_data_size();
  static const int kRequestedDataSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 requested_data_size() const;
  inline void set_requested_data_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Remote.MediaRequest.GetPart)
 private:
  inline void set_has_handle();
  inline void clear_has_handle();
  inline void set_has_requested_data_size();
  inline void clear_has_requested_data_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 handle_;
  ::google::protobuf::uint32 requested_data_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_media_2eproto();
  friend void protobuf_AssignDesc_media_2eproto();
  friend void protobuf_ShutdownFile_media_2eproto();

  void InitAsDefaultInstance();
  static MediaRequest_GetPart* default_instance_;
};
// -------------------------------------------------------------------

class MediaRequest_Terminate : public ::google::protobuf::Message {
 public:
  MediaRequest_Terminate();
  virtual ~MediaRequest_Terminate();

  MediaRequest_Terminate(const MediaRequest_Terminate& from);

  inline MediaRequest_Terminate& operator=(const MediaRequest_Terminate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaRequest_Terminate& default_instance();

  void Swap(MediaRequest_Terminate* other);

  // implements Message ----------------------------------------------

  MediaRequest_Terminate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaRequest_Terminate& from);
  void MergeFrom(const MediaRequest_Terminate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 handle = 1;
  inline bool has_handle() const;
  inline void clear_handle();
  static const int kHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 handle() const;
  inline void set_handle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Remote.MediaRequest.Terminate)
 private:
  inline void set_has_handle();
  inline void clear_has_handle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 handle_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_media_2eproto();
  friend void protobuf_AssignDesc_media_2eproto();
  friend void protobuf_ShutdownFile_media_2eproto();

  void InitAsDefaultInstance();
  static MediaRequest_Terminate* default_instance_;
};
// -------------------------------------------------------------------

class MediaRequest : public ::google::protobuf::Message {
 public:
  MediaRequest();
  virtual ~MediaRequest();

  MediaRequest(const MediaRequest& from);

  inline MediaRequest& operator=(const MediaRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaRequest& default_instance();

  void Swap(MediaRequest* other);

  // implements Message ----------------------------------------------

  MediaRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaRequest& from);
  void MergeFrom(const MediaRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MediaRequest_Prepare Prepare;
  typedef MediaRequest_GetPart GetPart;
  typedef MediaRequest_Terminate Terminate;

  typedef MediaRequest_Type Type;
  static const Type TypeMediaPrepare = MediaRequest_Type_TypeMediaPrepare;
  static const Type TypeMediaGetPart = MediaRequest_Type_TypeMediaGetPart;
  static const Type TypeMediaTerminate = MediaRequest_Type_TypeMediaTerminate;
  static inline bool Type_IsValid(int value) {
    return MediaRequest_Type_IsValid(value);
  }
  static const Type Type_MIN =
    MediaRequest_Type_Type_MIN;
  static const Type Type_MAX =
    MediaRequest_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    MediaRequest_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return MediaRequest_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return MediaRequest_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return MediaRequest_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .Remote.MediaRequest.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Remote::MediaRequest_Type type() const;
  inline void set_type(::Remote::MediaRequest_Type value);

  // optional .Remote.MediaRequest.Prepare prepare = 2;
  inline bool has_prepare() const;
  inline void clear_prepare();
  static const int kPrepareFieldNumber = 2;
  inline const ::Remote::MediaRequest_Prepare& prepare() const;
  inline ::Remote::MediaRequest_Prepare* mutable_prepare();
  inline ::Remote::MediaRequest_Prepare* release_prepare();
  inline void set_allocated_prepare(::Remote::MediaRequest_Prepare* prepare);

  // optional .Remote.MediaRequest.GetPart get_part = 3;
  inline bool has_get_part() const;
  inline void clear_get_part();
  static const int kGetPartFieldNumber = 3;
  inline const ::Remote::MediaRequest_GetPart& get_part() const;
  inline ::Remote::MediaRequest_GetPart* mutable_get_part();
  inline ::Remote::MediaRequest_GetPart* release_get_part();
  inline void set_allocated_get_part(::Remote::MediaRequest_GetPart* get_part);

  // optional .Remote.MediaRequest.Terminate terminate = 4;
  inline bool has_terminate() const;
  inline void clear_terminate();
  static const int kTerminateFieldNumber = 4;
  inline const ::Remote::MediaRequest_Terminate& terminate() const;
  inline ::Remote::MediaRequest_Terminate* mutable_terminate();
  inline ::Remote::MediaRequest_Terminate* release_terminate();
  inline void set_allocated_terminate(::Remote::MediaRequest_Terminate* terminate);

  // @@protoc_insertion_point(class_scope:Remote.MediaRequest)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_prepare();
  inline void clear_has_prepare();
  inline void set_has_get_part();
  inline void clear_has_get_part();
  inline void set_has_terminate();
  inline void clear_has_terminate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Remote::MediaRequest_Prepare* prepare_;
  ::Remote::MediaRequest_GetPart* get_part_;
  ::Remote::MediaRequest_Terminate* terminate_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_media_2eproto();
  friend void protobuf_AssignDesc_media_2eproto();
  friend void protobuf_ShutdownFile_media_2eproto();

  void InitAsDefaultInstance();
  static MediaRequest* default_instance_;
};
// -------------------------------------------------------------------

class MediaResponse_PrepareResult : public ::google::protobuf::Message {
 public:
  MediaResponse_PrepareResult();
  virtual ~MediaResponse_PrepareResult();

  MediaResponse_PrepareResult(const MediaResponse_PrepareResult& from);

  inline MediaResponse_PrepareResult& operator=(const MediaResponse_PrepareResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaResponse_PrepareResult& default_instance();

  void Swap(MediaResponse_PrepareResult* other);

  // implements Message ----------------------------------------------

  MediaResponse_PrepareResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaResponse_PrepareResult& from);
  void MergeFrom(const MediaResponse_PrepareResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 handle = 1;
  inline bool has_handle() const;
  inline void clear_handle();
  static const int kHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 handle() const;
  inline void set_handle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Remote.MediaResponse.PrepareResult)
 private:
  inline void set_has_handle();
  inline void clear_has_handle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 handle_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_media_2eproto();
  friend void protobuf_AssignDesc_media_2eproto();
  friend void protobuf_ShutdownFile_media_2eproto();

  void InitAsDefaultInstance();
  static MediaResponse_PrepareResult* default_instance_;
};
// -------------------------------------------------------------------

class MediaResponse_PartResult : public ::google::protobuf::Message {
 public:
  MediaResponse_PartResult();
  virtual ~MediaResponse_PartResult();

  MediaResponse_PartResult(const MediaResponse_PartResult& from);

  inline MediaResponse_PartResult& operator=(const MediaResponse_PartResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaResponse_PartResult& default_instance();

  void Swap(MediaResponse_PartResult* other);

  // implements Message ----------------------------------------------

  MediaResponse_PartResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaResponse_PartResult& from);
  void MergeFrom(const MediaResponse_PartResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:Remote.MediaResponse.PartResult)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_media_2eproto();
  friend void protobuf_AssignDesc_media_2eproto();
  friend void protobuf_ShutdownFile_media_2eproto();

  void InitAsDefaultInstance();
  static MediaResponse_PartResult* default_instance_;
};
// -------------------------------------------------------------------

class MediaResponse_TerminateResult : public ::google::protobuf::Message {
 public:
  MediaResponse_TerminateResult();
  virtual ~MediaResponse_TerminateResult();

  MediaResponse_TerminateResult(const MediaResponse_TerminateResult& from);

  inline MediaResponse_TerminateResult& operator=(const MediaResponse_TerminateResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaResponse_TerminateResult& default_instance();

  void Swap(MediaResponse_TerminateResult* other);

  // implements Message ----------------------------------------------

  MediaResponse_TerminateResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaResponse_TerminateResult& from);
  void MergeFrom(const MediaResponse_TerminateResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Remote.MediaResponse.TerminateResult)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_media_2eproto();
  friend void protobuf_AssignDesc_media_2eproto();
  friend void protobuf_ShutdownFile_media_2eproto();

  void InitAsDefaultInstance();
  static MediaResponse_TerminateResult* default_instance_;
};
// -------------------------------------------------------------------

class MediaResponse : public ::google::protobuf::Message {
 public:
  MediaResponse();
  virtual ~MediaResponse();

  MediaResponse(const MediaResponse& from);

  inline MediaResponse& operator=(const MediaResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaResponse& default_instance();

  void Swap(MediaResponse* other);

  // implements Message ----------------------------------------------

  MediaResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaResponse& from);
  void MergeFrom(const MediaResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MediaResponse_PrepareResult PrepareResult;
  typedef MediaResponse_PartResult PartResult;
  typedef MediaResponse_TerminateResult TerminateResult;

  typedef MediaResponse_Type Type;
  static const Type TypePrepareResult = MediaResponse_Type_TypePrepareResult;
  static const Type TypePartResult = MediaResponse_Type_TypePartResult;
  static const Type TypeTerminateResult = MediaResponse_Type_TypeTerminateResult;
  static inline bool Type_IsValid(int value) {
    return MediaResponse_Type_IsValid(value);
  }
  static const Type Type_MIN =
    MediaResponse_Type_Type_MIN;
  static const Type Type_MAX =
    MediaResponse_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    MediaResponse_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return MediaResponse_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return MediaResponse_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return MediaResponse_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .Remote.MediaResponse.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Remote::MediaResponse_Type type() const;
  inline void set_type(::Remote::MediaResponse_Type value);

  // optional .Remote.MediaResponse.PrepareResult prepare_result = 2;
  inline bool has_prepare_result() const;
  inline void clear_prepare_result();
  static const int kPrepareResultFieldNumber = 2;
  inline const ::Remote::MediaResponse_PrepareResult& prepare_result() const;
  inline ::Remote::MediaResponse_PrepareResult* mutable_prepare_result();
  inline ::Remote::MediaResponse_PrepareResult* release_prepare_result();
  inline void set_allocated_prepare_result(::Remote::MediaResponse_PrepareResult* prepare_result);

  // optional .Remote.MediaResponse.PartResult part_result = 3;
  inline bool has_part_result() const;
  inline void clear_part_result();
  static const int kPartResultFieldNumber = 3;
  inline const ::Remote::MediaResponse_PartResult& part_result() const;
  inline ::Remote::MediaResponse_PartResult* mutable_part_result();
  inline ::Remote::MediaResponse_PartResult* release_part_result();
  inline void set_allocated_part_result(::Remote::MediaResponse_PartResult* part_result);

  // optional .Remote.MediaResponse.TerminateResult terminate_result = 4;
  inline bool has_terminate_result() const;
  inline void clear_terminate_result();
  static const int kTerminateResultFieldNumber = 4;
  inline const ::Remote::MediaResponse_TerminateResult& terminate_result() const;
  inline ::Remote::MediaResponse_TerminateResult* mutable_terminate_result();
  inline ::Remote::MediaResponse_TerminateResult* release_terminate_result();
  inline void set_allocated_terminate_result(::Remote::MediaResponse_TerminateResult* terminate_result);

  // @@protoc_insertion_point(class_scope:Remote.MediaResponse)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_prepare_result();
  inline void clear_has_prepare_result();
  inline void set_has_part_result();
  inline void clear_has_part_result();
  inline void set_has_terminate_result();
  inline void clear_has_terminate_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Remote::MediaResponse_PrepareResult* prepare_result_;
  ::Remote::MediaResponse_PartResult* part_result_;
  ::Remote::MediaResponse_TerminateResult* terminate_result_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_media_2eproto();
  friend void protobuf_AssignDesc_media_2eproto();
  friend void protobuf_ShutdownFile_media_2eproto();

  void InitAsDefaultInstance();
  static MediaResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// MediaRequest_Prepare_Audio

// required int64 track_id = 1;
inline bool MediaRequest_Prepare_Audio::has_track_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaRequest_Prepare_Audio::set_has_track_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaRequest_Prepare_Audio::clear_has_track_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaRequest_Prepare_Audio::clear_track_id() {
  track_id_ = GOOGLE_LONGLONG(0);
  clear_has_track_id();
}
inline ::google::protobuf::int64 MediaRequest_Prepare_Audio::track_id() const {
  return track_id_;
}
inline void MediaRequest_Prepare_Audio::set_track_id(::google::protobuf::int64 value) {
  set_has_track_id();
  track_id_ = value;
}

// required .Remote.MediaRequest.Prepare.AudioCodecType codec_type = 2;
inline bool MediaRequest_Prepare_Audio::has_codec_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MediaRequest_Prepare_Audio::set_has_codec_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MediaRequest_Prepare_Audio::clear_has_codec_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MediaRequest_Prepare_Audio::clear_codec_type() {
  codec_type_ = 1;
  clear_has_codec_type();
}
inline ::Remote::MediaRequest_Prepare_AudioCodecType MediaRequest_Prepare_Audio::codec_type() const {
  return static_cast< ::Remote::MediaRequest_Prepare_AudioCodecType >(codec_type_);
}
inline void MediaRequest_Prepare_Audio::set_codec_type(::Remote::MediaRequest_Prepare_AudioCodecType value) {
  assert(::Remote::MediaRequest_Prepare_AudioCodecType_IsValid(value));
  set_has_codec_type();
  codec_type_ = value;
}

// required .Remote.MediaRequest.Prepare.AudioBitrate bitrate = 3;
inline bool MediaRequest_Prepare_Audio::has_bitrate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MediaRequest_Prepare_Audio::set_has_bitrate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MediaRequest_Prepare_Audio::clear_has_bitrate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MediaRequest_Prepare_Audio::clear_bitrate() {
  bitrate_ = 1;
  clear_has_bitrate();
}
inline ::Remote::MediaRequest_Prepare_AudioBitrate MediaRequest_Prepare_Audio::bitrate() const {
  return static_cast< ::Remote::MediaRequest_Prepare_AudioBitrate >(bitrate_);
}
inline void MediaRequest_Prepare_Audio::set_bitrate(::Remote::MediaRequest_Prepare_AudioBitrate value) {
  assert(::Remote::MediaRequest_Prepare_AudioBitrate_IsValid(value));
  set_has_bitrate();
  bitrate_ = value;
}

// optional uint32 stream_idx = 4;
inline bool MediaRequest_Prepare_Audio::has_stream_idx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MediaRequest_Prepare_Audio::set_has_stream_idx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MediaRequest_Prepare_Audio::clear_has_stream_idx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MediaRequest_Prepare_Audio::clear_stream_idx() {
  stream_idx_ = 0u;
  clear_has_stream_idx();
}
inline ::google::protobuf::uint32 MediaRequest_Prepare_Audio::stream_idx() const {
  return stream_idx_;
}
inline void MediaRequest_Prepare_Audio::set_stream_idx(::google::protobuf::uint32 value) {
  set_has_stream_idx();
  stream_idx_ = value;
}

// optional uint32 offset_secs = 5;
inline bool MediaRequest_Prepare_Audio::has_offset_secs() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MediaRequest_Prepare_Audio::set_has_offset_secs() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MediaRequest_Prepare_Audio::clear_has_offset_secs() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MediaRequest_Prepare_Audio::clear_offset_secs() {
  offset_secs_ = 0u;
  clear_has_offset_secs();
}
inline ::google::protobuf::uint32 MediaRequest_Prepare_Audio::offset_secs() const {
  return offset_secs_;
}
inline void MediaRequest_Prepare_Audio::set_offset_secs(::google::protobuf::uint32 value) {
  set_has_offset_secs();
  offset_secs_ = value;
}

// -------------------------------------------------------------------

// MediaRequest_Prepare_Video

// required int64 video_id = 1;
inline bool MediaRequest_Prepare_Video::has_video_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaRequest_Prepare_Video::set_has_video_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaRequest_Prepare_Video::clear_has_video_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaRequest_Prepare_Video::clear_video_id() {
  video_id_ = GOOGLE_LONGLONG(0);
  clear_has_video_id();
}
inline ::google::protobuf::int64 MediaRequest_Prepare_Video::video_id() const {
  return video_id_;
}
inline void MediaRequest_Prepare_Video::set_video_id(::google::protobuf::int64 value) {
  set_has_video_id();
  video_id_ = value;
}

// required .Remote.MediaRequest.Prepare.VideoCodecType codec_type = 2;
inline bool MediaRequest_Prepare_Video::has_codec_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MediaRequest_Prepare_Video::set_has_codec_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MediaRequest_Prepare_Video::clear_has_codec_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MediaRequest_Prepare_Video::clear_codec_type() {
  codec_type_ = 1;
  clear_has_codec_type();
}
inline ::Remote::MediaRequest_Prepare_VideoCodecType MediaRequest_Prepare_Video::codec_type() const {
  return static_cast< ::Remote::MediaRequest_Prepare_VideoCodecType >(codec_type_);
}
inline void MediaRequest_Prepare_Video::set_codec_type(::Remote::MediaRequest_Prepare_VideoCodecType value) {
  assert(::Remote::MediaRequest_Prepare_VideoCodecType_IsValid(value));
  set_has_codec_type();
  codec_type_ = value;
}

// required .Remote.MediaRequest.Prepare.AudioBitrate audio_bitrate = 3;
inline bool MediaRequest_Prepare_Video::has_audio_bitrate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MediaRequest_Prepare_Video::set_has_audio_bitrate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MediaRequest_Prepare_Video::clear_has_audio_bitrate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MediaRequest_Prepare_Video::clear_audio_bitrate() {
  audio_bitrate_ = 1;
  clear_has_audio_bitrate();
}
inline ::Remote::MediaRequest_Prepare_AudioBitrate MediaRequest_Prepare_Video::audio_bitrate() const {
  return static_cast< ::Remote::MediaRequest_Prepare_AudioBitrate >(audio_bitrate_);
}
inline void MediaRequest_Prepare_Video::set_audio_bitrate(::Remote::MediaRequest_Prepare_AudioBitrate value) {
  assert(::Remote::MediaRequest_Prepare_AudioBitrate_IsValid(value));
  set_has_audio_bitrate();
  audio_bitrate_ = value;
}

// required .Remote.MediaRequest.Prepare.VideoBitrate video_bitrate = 4;
inline bool MediaRequest_Prepare_Video::has_video_bitrate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MediaRequest_Prepare_Video::set_has_video_bitrate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MediaRequest_Prepare_Video::clear_has_video_bitrate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MediaRequest_Prepare_Video::clear_video_bitrate() {
  video_bitrate_ = 1;
  clear_has_video_bitrate();
}
inline ::Remote::MediaRequest_Prepare_VideoBitrate MediaRequest_Prepare_Video::video_bitrate() const {
  return static_cast< ::Remote::MediaRequest_Prepare_VideoBitrate >(video_bitrate_);
}
inline void MediaRequest_Prepare_Video::set_video_bitrate(::Remote::MediaRequest_Prepare_VideoBitrate value) {
  assert(::Remote::MediaRequest_Prepare_VideoBitrate_IsValid(value));
  set_has_video_bitrate();
  video_bitrate_ = value;
}

// optional uint32 offset_secs = 5;
inline bool MediaRequest_Prepare_Video::has_offset_secs() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MediaRequest_Prepare_Video::set_has_offset_secs() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MediaRequest_Prepare_Video::clear_has_offset_secs() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MediaRequest_Prepare_Video::clear_offset_secs() {
  offset_secs_ = 0u;
  clear_has_offset_secs();
}
inline ::google::protobuf::uint32 MediaRequest_Prepare_Video::offset_secs() const {
  return offset_secs_;
}
inline void MediaRequest_Prepare_Video::set_offset_secs(::google::protobuf::uint32 value) {
  set_has_offset_secs();
  offset_secs_ = value;
}

// optional uint32 audio_stream_idx = 6;
inline bool MediaRequest_Prepare_Video::has_audio_stream_idx() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MediaRequest_Prepare_Video::set_has_audio_stream_idx() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MediaRequest_Prepare_Video::clear_has_audio_stream_idx() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MediaRequest_Prepare_Video::clear_audio_stream_idx() {
  audio_stream_idx_ = 0u;
  clear_has_audio_stream_idx();
}
inline ::google::protobuf::uint32 MediaRequest_Prepare_Video::audio_stream_idx() const {
  return audio_stream_idx_;
}
inline void MediaRequest_Prepare_Video::set_audio_stream_idx(::google::protobuf::uint32 value) {
  set_has_audio_stream_idx();
  audio_stream_idx_ = value;
}

// optional uint32 video_stream_idx = 7;
inline bool MediaRequest_Prepare_Video::has_video_stream_idx() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MediaRequest_Prepare_Video::set_has_video_stream_idx() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MediaRequest_Prepare_Video::clear_has_video_stream_idx() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MediaRequest_Prepare_Video::clear_video_stream_idx() {
  video_stream_idx_ = 0u;
  clear_has_video_stream_idx();
}
inline ::google::protobuf::uint32 MediaRequest_Prepare_Video::video_stream_idx() const {
  return video_stream_idx_;
}
inline void MediaRequest_Prepare_Video::set_video_stream_idx(::google::protobuf::uint32 value) {
  set_has_video_stream_idx();
  video_stream_idx_ = value;
}

// optional uint32 subtitle_stream_idx = 8;
inline bool MediaRequest_Prepare_Video::has_subtitle_stream_idx() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MediaRequest_Prepare_Video::set_has_subtitle_stream_idx() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MediaRequest_Prepare_Video::clear_has_subtitle_stream_idx() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MediaRequest_Prepare_Video::clear_subtitle_stream_idx() {
  subtitle_stream_idx_ = 0u;
  clear_has_subtitle_stream_idx();
}
inline ::google::protobuf::uint32 MediaRequest_Prepare_Video::subtitle_stream_idx() const {
  return subtitle_stream_idx_;
}
inline void MediaRequest_Prepare_Video::set_subtitle_stream_idx(::google::protobuf::uint32 value) {
  set_has_subtitle_stream_idx();
  subtitle_stream_idx_ = value;
}

// -------------------------------------------------------------------

// MediaRequest_Prepare

// required .Remote.MediaRequest.Prepare.Type type = 1;
inline bool MediaRequest_Prepare::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaRequest_Prepare::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaRequest_Prepare::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaRequest_Prepare::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Remote::MediaRequest_Prepare_Type MediaRequest_Prepare::type() const {
  return static_cast< ::Remote::MediaRequest_Prepare_Type >(type_);
}
inline void MediaRequest_Prepare::set_type(::Remote::MediaRequest_Prepare_Type value) {
  assert(::Remote::MediaRequest_Prepare_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .Remote.MediaRequest.Prepare.Audio audio = 2;
inline bool MediaRequest_Prepare::has_audio() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MediaRequest_Prepare::set_has_audio() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MediaRequest_Prepare::clear_has_audio() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MediaRequest_Prepare::clear_audio() {
  if (audio_ != NULL) audio_->::Remote::MediaRequest_Prepare_Audio::Clear();
  clear_has_audio();
}
inline const ::Remote::MediaRequest_Prepare_Audio& MediaRequest_Prepare::audio() const {
  return audio_ != NULL ? *audio_ : *default_instance_->audio_;
}
inline ::Remote::MediaRequest_Prepare_Audio* MediaRequest_Prepare::mutable_audio() {
  set_has_audio();
  if (audio_ == NULL) audio_ = new ::Remote::MediaRequest_Prepare_Audio;
  return audio_;
}
inline ::Remote::MediaRequest_Prepare_Audio* MediaRequest_Prepare::release_audio() {
  clear_has_audio();
  ::Remote::MediaRequest_Prepare_Audio* temp = audio_;
  audio_ = NULL;
  return temp;
}
inline void MediaRequest_Prepare::set_allocated_audio(::Remote::MediaRequest_Prepare_Audio* audio) {
  delete audio_;
  audio_ = audio;
  if (audio) {
    set_has_audio();
  } else {
    clear_has_audio();
  }
}

// optional .Remote.MediaRequest.Prepare.Video video = 3;
inline bool MediaRequest_Prepare::has_video() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MediaRequest_Prepare::set_has_video() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MediaRequest_Prepare::clear_has_video() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MediaRequest_Prepare::clear_video() {
  if (video_ != NULL) video_->::Remote::MediaRequest_Prepare_Video::Clear();
  clear_has_video();
}
inline const ::Remote::MediaRequest_Prepare_Video& MediaRequest_Prepare::video() const {
  return video_ != NULL ? *video_ : *default_instance_->video_;
}
inline ::Remote::MediaRequest_Prepare_Video* MediaRequest_Prepare::mutable_video() {
  set_has_video();
  if (video_ == NULL) video_ = new ::Remote::MediaRequest_Prepare_Video;
  return video_;
}
inline ::Remote::MediaRequest_Prepare_Video* MediaRequest_Prepare::release_video() {
  clear_has_video();
  ::Remote::MediaRequest_Prepare_Video* temp = video_;
  video_ = NULL;
  return temp;
}
inline void MediaRequest_Prepare::set_allocated_video(::Remote::MediaRequest_Prepare_Video* video) {
  delete video_;
  video_ = video;
  if (video) {
    set_has_video();
  } else {
    clear_has_video();
  }
}

// -------------------------------------------------------------------

// MediaRequest_GetPart

// required uint32 handle = 1;
inline bool MediaRequest_GetPart::has_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaRequest_GetPart::set_has_handle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaRequest_GetPart::clear_has_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaRequest_GetPart::clear_handle() {
  handle_ = 0u;
  clear_has_handle();
}
inline ::google::protobuf::uint32 MediaRequest_GetPart::handle() const {
  return handle_;
}
inline void MediaRequest_GetPart::set_handle(::google::protobuf::uint32 value) {
  set_has_handle();
  handle_ = value;
}

// required uint32 requested_data_size = 2;
inline bool MediaRequest_GetPart::has_requested_data_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MediaRequest_GetPart::set_has_requested_data_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MediaRequest_GetPart::clear_has_requested_data_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MediaRequest_GetPart::clear_requested_data_size() {
  requested_data_size_ = 0u;
  clear_has_requested_data_size();
}
inline ::google::protobuf::uint32 MediaRequest_GetPart::requested_data_size() const {
  return requested_data_size_;
}
inline void MediaRequest_GetPart::set_requested_data_size(::google::protobuf::uint32 value) {
  set_has_requested_data_size();
  requested_data_size_ = value;
}

// -------------------------------------------------------------------

// MediaRequest_Terminate

// required uint32 handle = 1;
inline bool MediaRequest_Terminate::has_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaRequest_Terminate::set_has_handle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaRequest_Terminate::clear_has_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaRequest_Terminate::clear_handle() {
  handle_ = 0u;
  clear_has_handle();
}
inline ::google::protobuf::uint32 MediaRequest_Terminate::handle() const {
  return handle_;
}
inline void MediaRequest_Terminate::set_handle(::google::protobuf::uint32 value) {
  set_has_handle();
  handle_ = value;
}

// -------------------------------------------------------------------

// MediaRequest

// required .Remote.MediaRequest.Type type = 1;
inline bool MediaRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaRequest::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Remote::MediaRequest_Type MediaRequest::type() const {
  return static_cast< ::Remote::MediaRequest_Type >(type_);
}
inline void MediaRequest::set_type(::Remote::MediaRequest_Type value) {
  assert(::Remote::MediaRequest_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .Remote.MediaRequest.Prepare prepare = 2;
inline bool MediaRequest::has_prepare() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MediaRequest::set_has_prepare() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MediaRequest::clear_has_prepare() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MediaRequest::clear_prepare() {
  if (prepare_ != NULL) prepare_->::Remote::MediaRequest_Prepare::Clear();
  clear_has_prepare();
}
inline const ::Remote::MediaRequest_Prepare& MediaRequest::prepare() const {
  return prepare_ != NULL ? *prepare_ : *default_instance_->prepare_;
}
inline ::Remote::MediaRequest_Prepare* MediaRequest::mutable_prepare() {
  set_has_prepare();
  if (prepare_ == NULL) prepare_ = new ::Remote::MediaRequest_Prepare;
  return prepare_;
}
inline ::Remote::MediaRequest_Prepare* MediaRequest::release_prepare() {
  clear_has_prepare();
  ::Remote::MediaRequest_Prepare* temp = prepare_;
  prepare_ = NULL;
  return temp;
}
inline void MediaRequest::set_allocated_prepare(::Remote::MediaRequest_Prepare* prepare) {
  delete prepare_;
  prepare_ = prepare;
  if (prepare) {
    set_has_prepare();
  } else {
    clear_has_prepare();
  }
}

// optional .Remote.MediaRequest.GetPart get_part = 3;
inline bool MediaRequest::has_get_part() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MediaRequest::set_has_get_part() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MediaRequest::clear_has_get_part() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MediaRequest::clear_get_part() {
  if (get_part_ != NULL) get_part_->::Remote::MediaRequest_GetPart::Clear();
  clear_has_get_part();
}
inline const ::Remote::MediaRequest_GetPart& MediaRequest::get_part() const {
  return get_part_ != NULL ? *get_part_ : *default_instance_->get_part_;
}
inline ::Remote::MediaRequest_GetPart* MediaRequest::mutable_get_part() {
  set_has_get_part();
  if (get_part_ == NULL) get_part_ = new ::Remote::MediaRequest_GetPart;
  return get_part_;
}
inline ::Remote::MediaRequest_GetPart* MediaRequest::release_get_part() {
  clear_has_get_part();
  ::Remote::MediaRequest_GetPart* temp = get_part_;
  get_part_ = NULL;
  return temp;
}
inline void MediaRequest::set_allocated_get_part(::Remote::MediaRequest_GetPart* get_part) {
  delete get_part_;
  get_part_ = get_part;
  if (get_part) {
    set_has_get_part();
  } else {
    clear_has_get_part();
  }
}

// optional .Remote.MediaRequest.Terminate terminate = 4;
inline bool MediaRequest::has_terminate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MediaRequest::set_has_terminate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MediaRequest::clear_has_terminate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MediaRequest::clear_terminate() {
  if (terminate_ != NULL) terminate_->::Remote::MediaRequest_Terminate::Clear();
  clear_has_terminate();
}
inline const ::Remote::MediaRequest_Terminate& MediaRequest::terminate() const {
  return terminate_ != NULL ? *terminate_ : *default_instance_->terminate_;
}
inline ::Remote::MediaRequest_Terminate* MediaRequest::mutable_terminate() {
  set_has_terminate();
  if (terminate_ == NULL) terminate_ = new ::Remote::MediaRequest_Terminate;
  return terminate_;
}
inline ::Remote::MediaRequest_Terminate* MediaRequest::release_terminate() {
  clear_has_terminate();
  ::Remote::MediaRequest_Terminate* temp = terminate_;
  terminate_ = NULL;
  return temp;
}
inline void MediaRequest::set_allocated_terminate(::Remote::MediaRequest_Terminate* terminate) {
  delete terminate_;
  terminate_ = terminate;
  if (terminate) {
    set_has_terminate();
  } else {
    clear_has_terminate();
  }
}

// -------------------------------------------------------------------

// MediaResponse_PrepareResult

// optional uint32 handle = 1;
inline bool MediaResponse_PrepareResult::has_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaResponse_PrepareResult::set_has_handle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaResponse_PrepareResult::clear_has_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaResponse_PrepareResult::clear_handle() {
  handle_ = 0u;
  clear_has_handle();
}
inline ::google::protobuf::uint32 MediaResponse_PrepareResult::handle() const {
  return handle_;
}
inline void MediaResponse_PrepareResult::set_handle(::google::protobuf::uint32 value) {
  set_has_handle();
  handle_ = value;
}

// -------------------------------------------------------------------

// MediaResponse_PartResult

// optional bytes data = 2;
inline bool MediaResponse_PartResult::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaResponse_PartResult::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaResponse_PartResult::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaResponse_PartResult::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& MediaResponse_PartResult::data() const {
  return *data_;
}
inline void MediaResponse_PartResult::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void MediaResponse_PartResult::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void MediaResponse_PartResult::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MediaResponse_PartResult::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* MediaResponse_PartResult::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MediaResponse_PartResult::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MediaResponse_TerminateResult

// -------------------------------------------------------------------

// MediaResponse

// required .Remote.MediaResponse.Type type = 1;
inline bool MediaResponse::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaResponse::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaResponse::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Remote::MediaResponse_Type MediaResponse::type() const {
  return static_cast< ::Remote::MediaResponse_Type >(type_);
}
inline void MediaResponse::set_type(::Remote::MediaResponse_Type value) {
  assert(::Remote::MediaResponse_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .Remote.MediaResponse.PrepareResult prepare_result = 2;
inline bool MediaResponse::has_prepare_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MediaResponse::set_has_prepare_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MediaResponse::clear_has_prepare_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MediaResponse::clear_prepare_result() {
  if (prepare_result_ != NULL) prepare_result_->::Remote::MediaResponse_PrepareResult::Clear();
  clear_has_prepare_result();
}
inline const ::Remote::MediaResponse_PrepareResult& MediaResponse::prepare_result() const {
  return prepare_result_ != NULL ? *prepare_result_ : *default_instance_->prepare_result_;
}
inline ::Remote::MediaResponse_PrepareResult* MediaResponse::mutable_prepare_result() {
  set_has_prepare_result();
  if (prepare_result_ == NULL) prepare_result_ = new ::Remote::MediaResponse_PrepareResult;
  return prepare_result_;
}
inline ::Remote::MediaResponse_PrepareResult* MediaResponse::release_prepare_result() {
  clear_has_prepare_result();
  ::Remote::MediaResponse_PrepareResult* temp = prepare_result_;
  prepare_result_ = NULL;
  return temp;
}
inline void MediaResponse::set_allocated_prepare_result(::Remote::MediaResponse_PrepareResult* prepare_result) {
  delete prepare_result_;
  prepare_result_ = prepare_result;
  if (prepare_result) {
    set_has_prepare_result();
  } else {
    clear_has_prepare_result();
  }
}

// optional .Remote.MediaResponse.PartResult part_result = 3;
inline bool MediaResponse::has_part_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MediaResponse::set_has_part_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MediaResponse::clear_has_part_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MediaResponse::clear_part_result() {
  if (part_result_ != NULL) part_result_->::Remote::MediaResponse_PartResult::Clear();
  clear_has_part_result();
}
inline const ::Remote::MediaResponse_PartResult& MediaResponse::part_result() const {
  return part_result_ != NULL ? *part_result_ : *default_instance_->part_result_;
}
inline ::Remote::MediaResponse_PartResult* MediaResponse::mutable_part_result() {
  set_has_part_result();
  if (part_result_ == NULL) part_result_ = new ::Remote::MediaResponse_PartResult;
  return part_result_;
}
inline ::Remote::MediaResponse_PartResult* MediaResponse::release_part_result() {
  clear_has_part_result();
  ::Remote::MediaResponse_PartResult* temp = part_result_;
  part_result_ = NULL;
  return temp;
}
inline void MediaResponse::set_allocated_part_result(::Remote::MediaResponse_PartResult* part_result) {
  delete part_result_;
  part_result_ = part_result;
  if (part_result) {
    set_has_part_result();
  } else {
    clear_has_part_result();
  }
}

// optional .Remote.MediaResponse.TerminateResult terminate_result = 4;
inline bool MediaResponse::has_terminate_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MediaResponse::set_has_terminate_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MediaResponse::clear_has_terminate_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MediaResponse::clear_terminate_result() {
  if (terminate_result_ != NULL) terminate_result_->::Remote::MediaResponse_TerminateResult::Clear();
  clear_has_terminate_result();
}
inline const ::Remote::MediaResponse_TerminateResult& MediaResponse::terminate_result() const {
  return terminate_result_ != NULL ? *terminate_result_ : *default_instance_->terminate_result_;
}
inline ::Remote::MediaResponse_TerminateResult* MediaResponse::mutable_terminate_result() {
  set_has_terminate_result();
  if (terminate_result_ == NULL) terminate_result_ = new ::Remote::MediaResponse_TerminateResult;
  return terminate_result_;
}
inline ::Remote::MediaResponse_TerminateResult* MediaResponse::release_terminate_result() {
  clear_has_terminate_result();
  ::Remote::MediaResponse_TerminateResult* temp = terminate_result_;
  terminate_result_ = NULL;
  return temp;
}
inline void MediaResponse::set_allocated_terminate_result(::Remote::MediaResponse_TerminateResult* terminate_result) {
  delete terminate_result_;
  terminate_result_ = terminate_result;
  if (terminate_result) {
    set_has_terminate_result();
  } else {
    clear_has_terminate_result();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Remote

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Remote::MediaRequest_Prepare_AudioCodecType>() {
  return ::Remote::MediaRequest_Prepare_AudioCodecType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Remote::MediaRequest_Prepare_AudioBitrate>() {
  return ::Remote::MediaRequest_Prepare_AudioBitrate_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Remote::MediaRequest_Prepare_VideoCodecType>() {
  return ::Remote::MediaRequest_Prepare_VideoCodecType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Remote::MediaRequest_Prepare_VideoBitrate>() {
  return ::Remote::MediaRequest_Prepare_VideoBitrate_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Remote::MediaRequest_Prepare_Type>() {
  return ::Remote::MediaRequest_Prepare_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Remote::MediaRequest_Type>() {
  return ::Remote::MediaRequest_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Remote::MediaResponse_Type>() {
  return ::Remote::MediaResponse_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_media_2eproto__INCLUDED
