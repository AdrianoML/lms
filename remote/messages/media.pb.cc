// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: media.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "media.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Remote {

namespace {

const ::google::protobuf::Descriptor* MediaRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaRequest_Prepare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaRequest_Prepare_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaRequest_Prepare_Audio_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaRequest_Prepare_Audio_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaRequest_Prepare_Video_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaRequest_Prepare_Video_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MediaRequest_Prepare_AudioCodecType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MediaRequest_Prepare_AudioBitrate_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MediaRequest_Prepare_VideoCodecType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MediaRequest_Prepare_VideoBitrate_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MediaRequest_Prepare_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MediaRequest_GetPart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaRequest_GetPart_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaRequest_Terminate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaRequest_Terminate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MediaRequest_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MediaResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaResponse_PrepareResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaResponse_PrepareResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaResponse_PartResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaResponse_PartResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaResponse_TerminateResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaResponse_TerminateResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MediaResponse_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_media_2eproto() {
  protobuf_AddDesc_media_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "media.proto");
  GOOGLE_CHECK(file != NULL);
  MediaRequest_descriptor_ = file->message_type(0);
  static const int MediaRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRequest, prepare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRequest, get_part_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRequest, terminate_),
  };
  MediaRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaRequest_descriptor_,
      MediaRequest::default_instance_,
      MediaRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaRequest));
  MediaRequest_Prepare_descriptor_ = MediaRequest_descriptor_->nested_type(0);
  static const int MediaRequest_Prepare_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRequest_Prepare, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRequest_Prepare, audio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRequest_Prepare, video_),
  };
  MediaRequest_Prepare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaRequest_Prepare_descriptor_,
      MediaRequest_Prepare::default_instance_,
      MediaRequest_Prepare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRequest_Prepare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRequest_Prepare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaRequest_Prepare));
  MediaRequest_Prepare_Audio_descriptor_ = MediaRequest_Prepare_descriptor_->nested_type(0);
  static const int MediaRequest_Prepare_Audio_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRequest_Prepare_Audio, track_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRequest_Prepare_Audio, codec_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRequest_Prepare_Audio, bitrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRequest_Prepare_Audio, stream_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRequest_Prepare_Audio, offset_secs_),
  };
  MediaRequest_Prepare_Audio_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaRequest_Prepare_Audio_descriptor_,
      MediaRequest_Prepare_Audio::default_instance_,
      MediaRequest_Prepare_Audio_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRequest_Prepare_Audio, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRequest_Prepare_Audio, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaRequest_Prepare_Audio));
  MediaRequest_Prepare_Video_descriptor_ = MediaRequest_Prepare_descriptor_->nested_type(1);
  static const int MediaRequest_Prepare_Video_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRequest_Prepare_Video, video_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRequest_Prepare_Video, codec_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRequest_Prepare_Video, audio_bitrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRequest_Prepare_Video, video_bitrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRequest_Prepare_Video, offset_secs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRequest_Prepare_Video, audio_stream_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRequest_Prepare_Video, video_stream_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRequest_Prepare_Video, subtitle_stream_idx_),
  };
  MediaRequest_Prepare_Video_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaRequest_Prepare_Video_descriptor_,
      MediaRequest_Prepare_Video::default_instance_,
      MediaRequest_Prepare_Video_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRequest_Prepare_Video, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRequest_Prepare_Video, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaRequest_Prepare_Video));
  MediaRequest_Prepare_AudioCodecType_descriptor_ = MediaRequest_Prepare_descriptor_->enum_type(0);
  MediaRequest_Prepare_AudioBitrate_descriptor_ = MediaRequest_Prepare_descriptor_->enum_type(1);
  MediaRequest_Prepare_VideoCodecType_descriptor_ = MediaRequest_Prepare_descriptor_->enum_type(2);
  MediaRequest_Prepare_VideoBitrate_descriptor_ = MediaRequest_Prepare_descriptor_->enum_type(3);
  MediaRequest_Prepare_Type_descriptor_ = MediaRequest_Prepare_descriptor_->enum_type(4);
  MediaRequest_GetPart_descriptor_ = MediaRequest_descriptor_->nested_type(1);
  static const int MediaRequest_GetPart_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRequest_GetPart, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRequest_GetPart, requested_data_size_),
  };
  MediaRequest_GetPart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaRequest_GetPart_descriptor_,
      MediaRequest_GetPart::default_instance_,
      MediaRequest_GetPart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRequest_GetPart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRequest_GetPart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaRequest_GetPart));
  MediaRequest_Terminate_descriptor_ = MediaRequest_descriptor_->nested_type(2);
  static const int MediaRequest_Terminate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRequest_Terminate, handle_),
  };
  MediaRequest_Terminate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaRequest_Terminate_descriptor_,
      MediaRequest_Terminate::default_instance_,
      MediaRequest_Terminate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRequest_Terminate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRequest_Terminate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaRequest_Terminate));
  MediaRequest_Type_descriptor_ = MediaRequest_descriptor_->enum_type(0);
  MediaResponse_descriptor_ = file->message_type(1);
  static const int MediaResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaResponse, prepare_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaResponse, part_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaResponse, terminate_result_),
  };
  MediaResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaResponse_descriptor_,
      MediaResponse::default_instance_,
      MediaResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaResponse));
  MediaResponse_PrepareResult_descriptor_ = MediaResponse_descriptor_->nested_type(0);
  static const int MediaResponse_PrepareResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaResponse_PrepareResult, handle_),
  };
  MediaResponse_PrepareResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaResponse_PrepareResult_descriptor_,
      MediaResponse_PrepareResult::default_instance_,
      MediaResponse_PrepareResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaResponse_PrepareResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaResponse_PrepareResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaResponse_PrepareResult));
  MediaResponse_PartResult_descriptor_ = MediaResponse_descriptor_->nested_type(1);
  static const int MediaResponse_PartResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaResponse_PartResult, data_),
  };
  MediaResponse_PartResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaResponse_PartResult_descriptor_,
      MediaResponse_PartResult::default_instance_,
      MediaResponse_PartResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaResponse_PartResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaResponse_PartResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaResponse_PartResult));
  MediaResponse_TerminateResult_descriptor_ = MediaResponse_descriptor_->nested_type(2);
  static const int MediaResponse_TerminateResult_offsets_[1] = {
  };
  MediaResponse_TerminateResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaResponse_TerminateResult_descriptor_,
      MediaResponse_TerminateResult::default_instance_,
      MediaResponse_TerminateResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaResponse_TerminateResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaResponse_TerminateResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaResponse_TerminateResult));
  MediaResponse_Type_descriptor_ = MediaResponse_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_media_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaRequest_descriptor_, &MediaRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaRequest_Prepare_descriptor_, &MediaRequest_Prepare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaRequest_Prepare_Audio_descriptor_, &MediaRequest_Prepare_Audio::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaRequest_Prepare_Video_descriptor_, &MediaRequest_Prepare_Video::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaRequest_GetPart_descriptor_, &MediaRequest_GetPart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaRequest_Terminate_descriptor_, &MediaRequest_Terminate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaResponse_descriptor_, &MediaResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaResponse_PrepareResult_descriptor_, &MediaResponse_PrepareResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaResponse_PartResult_descriptor_, &MediaResponse_PartResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaResponse_TerminateResult_descriptor_, &MediaResponse_TerminateResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_media_2eproto() {
  delete MediaRequest::default_instance_;
  delete MediaRequest_reflection_;
  delete MediaRequest_Prepare::default_instance_;
  delete MediaRequest_Prepare_reflection_;
  delete MediaRequest_Prepare_Audio::default_instance_;
  delete MediaRequest_Prepare_Audio_reflection_;
  delete MediaRequest_Prepare_Video::default_instance_;
  delete MediaRequest_Prepare_Video_reflection_;
  delete MediaRequest_GetPart::default_instance_;
  delete MediaRequest_GetPart_reflection_;
  delete MediaRequest_Terminate::default_instance_;
  delete MediaRequest_Terminate_reflection_;
  delete MediaResponse::default_instance_;
  delete MediaResponse_reflection_;
  delete MediaResponse_PrepareResult::default_instance_;
  delete MediaResponse_PrepareResult_reflection_;
  delete MediaResponse_PartResult::default_instance_;
  delete MediaResponse_PartResult_reflection_;
  delete MediaResponse_TerminateResult::default_instance_;
  delete MediaResponse_TerminateResult_reflection_;
}

void protobuf_AddDesc_media_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Remote::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013media.proto\022\006Remote\032\014common.proto\"\357\n\n\014"
    "MediaRequest\022\'\n\004type\030\001 \002(\0162\031.Remote.Medi"
    "aRequest.Type\022-\n\007prepare\030\002 \001(\0132\034.Remote."
    "MediaRequest.Prepare\022.\n\010get_part\030\003 \001(\0132\034"
    ".Remote.MediaRequest.GetPart\0221\n\tterminat"
    "e\030\004 \001(\0132\036.Remote.MediaRequest.Terminate\032"
    "\202\010\n\007Prepare\022/\n\004type\030\001 \002(\0162!.Remote.Media"
    "Request.Prepare.Type\0221\n\005audio\030\002 \001(\0132\".Re"
    "mote.MediaRequest.Prepare.Audio\0221\n\005video"
    "\030\003 \001(\0132\".Remote.MediaRequest.Prepare.Vid"
    "eo\032\277\001\n\005Audio\022\020\n\010track_id\030\001 \002(\003\022\?\n\ncodec_"
    "type\030\002 \002(\0162+.Remote.MediaRequest.Prepare"
    ".AudioCodecType\022:\n\007bitrate\030\003 \002(\0162).Remot"
    "e.MediaRequest.Prepare.AudioBitrate\022\022\n\ns"
    "tream_idx\030\004 \001(\r\022\023\n\013offset_secs\030\005 \001(\r\032\304\002\n"
    "\005Video\022\020\n\010video_id\030\001 \002(\003\022\?\n\ncodec_type\030\002"
    " \002(\0162+.Remote.MediaRequest.Prepare.Video"
    "CodecType\022@\n\raudio_bitrate\030\003 \002(\0162).Remot"
    "e.MediaRequest.Prepare.AudioBitrate\022@\n\rv"
    "ideo_bitrate\030\004 \002(\0162).Remote.MediaRequest"
    ".Prepare.VideoBitrate\022\023\n\013offset_secs\030\005 \001"
    "(\r\022\030\n\020audio_stream_idx\030\006 \001(\r\022\030\n\020video_st"
    "ream_idx\030\007 \001(\r\022\033\n\023subtitle_stream_idx\030\010 "
    "\001(\r\"\'\n\016AudioCodecType\022\025\n\021AudioCodecTypeO"
    "GA\020\001\"\255\001\n\014AudioBitrate\022\030\n\024AudioBitrate_32"
    "_kbps\020\001\022\030\n\024AudioBitrate_64_kbps\020\002\022\030\n\024Aud"
    "ioBitrate_96_kbps\020\003\022\031\n\025AudioBitrate_128_"
    "kbps\020\004\022\031\n\025AudioBitrate_192_kbps\020\005\022\031\n\025Aud"
    "ioBitrate_256_kbps\020\006\"\'\n\016VideoCodecType\022\025"
    "\n\021VideoCodecTypeOGV\020\001\")\n\014VideoBitrate\022\031\n"
    "\025VideoBitrate_512_kbps\020\001\"*\n\004Type\022\020\n\014Audi"
    "oRequest\020\001\022\020\n\014VideoRequest\020\002\0326\n\007GetPart\022"
    "\016\n\006handle\030\001 \002(\r\022\033\n\023requested_data_size\030\002"
    " \002(\r\032\033\n\tTerminate\022\016\n\006handle\030\001 \002(\r\"J\n\004Typ"
    "e\022\024\n\020TypeMediaPrepare\020\001\022\024\n\020TypeMediaGetP"
    "art\020\002\022\026\n\022TypeMediaTerminate\020\003\"\212\003\n\rMediaR"
    "esponse\022(\n\004type\030\001 \002(\0162\032.Remote.MediaResp"
    "onse.Type\022;\n\016prepare_result\030\002 \001(\0132#.Remo"
    "te.MediaResponse.PrepareResult\0225\n\013part_r"
    "esult\030\003 \001(\0132 .Remote.MediaResponse.PartR"
    "esult\022\?\n\020terminate_result\030\004 \001(\0132%.Remote"
    ".MediaResponse.TerminateResult\032\037\n\rPrepar"
    "eResult\022\016\n\006handle\030\001 \001(\r\032\032\n\nPartResult\022\014\n"
    "\004data\030\002 \001(\014\032\021\n\017TerminateResult\"J\n\004Type\022\025"
    "\n\021TypePrepareResult\020\001\022\022\n\016TypePartResult\020"
    "\002\022\027\n\023TypeTerminateResult\020\003", 1826);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "media.proto", &protobuf_RegisterTypes);
  MediaRequest::default_instance_ = new MediaRequest();
  MediaRequest_Prepare::default_instance_ = new MediaRequest_Prepare();
  MediaRequest_Prepare_Audio::default_instance_ = new MediaRequest_Prepare_Audio();
  MediaRequest_Prepare_Video::default_instance_ = new MediaRequest_Prepare_Video();
  MediaRequest_GetPart::default_instance_ = new MediaRequest_GetPart();
  MediaRequest_Terminate::default_instance_ = new MediaRequest_Terminate();
  MediaResponse::default_instance_ = new MediaResponse();
  MediaResponse_PrepareResult::default_instance_ = new MediaResponse_PrepareResult();
  MediaResponse_PartResult::default_instance_ = new MediaResponse_PartResult();
  MediaResponse_TerminateResult::default_instance_ = new MediaResponse_TerminateResult();
  MediaRequest::default_instance_->InitAsDefaultInstance();
  MediaRequest_Prepare::default_instance_->InitAsDefaultInstance();
  MediaRequest_Prepare_Audio::default_instance_->InitAsDefaultInstance();
  MediaRequest_Prepare_Video::default_instance_->InitAsDefaultInstance();
  MediaRequest_GetPart::default_instance_->InitAsDefaultInstance();
  MediaRequest_Terminate::default_instance_->InitAsDefaultInstance();
  MediaResponse::default_instance_->InitAsDefaultInstance();
  MediaResponse_PrepareResult::default_instance_->InitAsDefaultInstance();
  MediaResponse_PartResult::default_instance_->InitAsDefaultInstance();
  MediaResponse_TerminateResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_media_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_media_2eproto {
  StaticDescriptorInitializer_media_2eproto() {
    protobuf_AddDesc_media_2eproto();
  }
} static_descriptor_initializer_media_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* MediaRequest_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaRequest_Type_descriptor_;
}
bool MediaRequest_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MediaRequest_Type MediaRequest::TypeMediaPrepare;
const MediaRequest_Type MediaRequest::TypeMediaGetPart;
const MediaRequest_Type MediaRequest::TypeMediaTerminate;
const MediaRequest_Type MediaRequest::Type_MIN;
const MediaRequest_Type MediaRequest::Type_MAX;
const int MediaRequest::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* MediaRequest_Prepare_AudioCodecType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaRequest_Prepare_AudioCodecType_descriptor_;
}
bool MediaRequest_Prepare_AudioCodecType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MediaRequest_Prepare_AudioCodecType MediaRequest_Prepare::AudioCodecTypeOGA;
const MediaRequest_Prepare_AudioCodecType MediaRequest_Prepare::AudioCodecType_MIN;
const MediaRequest_Prepare_AudioCodecType MediaRequest_Prepare::AudioCodecType_MAX;
const int MediaRequest_Prepare::AudioCodecType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* MediaRequest_Prepare_AudioBitrate_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaRequest_Prepare_AudioBitrate_descriptor_;
}
bool MediaRequest_Prepare_AudioBitrate_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MediaRequest_Prepare_AudioBitrate MediaRequest_Prepare::AudioBitrate_32_kbps;
const MediaRequest_Prepare_AudioBitrate MediaRequest_Prepare::AudioBitrate_64_kbps;
const MediaRequest_Prepare_AudioBitrate MediaRequest_Prepare::AudioBitrate_96_kbps;
const MediaRequest_Prepare_AudioBitrate MediaRequest_Prepare::AudioBitrate_128_kbps;
const MediaRequest_Prepare_AudioBitrate MediaRequest_Prepare::AudioBitrate_192_kbps;
const MediaRequest_Prepare_AudioBitrate MediaRequest_Prepare::AudioBitrate_256_kbps;
const MediaRequest_Prepare_AudioBitrate MediaRequest_Prepare::AudioBitrate_MIN;
const MediaRequest_Prepare_AudioBitrate MediaRequest_Prepare::AudioBitrate_MAX;
const int MediaRequest_Prepare::AudioBitrate_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* MediaRequest_Prepare_VideoCodecType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaRequest_Prepare_VideoCodecType_descriptor_;
}
bool MediaRequest_Prepare_VideoCodecType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MediaRequest_Prepare_VideoCodecType MediaRequest_Prepare::VideoCodecTypeOGV;
const MediaRequest_Prepare_VideoCodecType MediaRequest_Prepare::VideoCodecType_MIN;
const MediaRequest_Prepare_VideoCodecType MediaRequest_Prepare::VideoCodecType_MAX;
const int MediaRequest_Prepare::VideoCodecType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* MediaRequest_Prepare_VideoBitrate_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaRequest_Prepare_VideoBitrate_descriptor_;
}
bool MediaRequest_Prepare_VideoBitrate_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MediaRequest_Prepare_VideoBitrate MediaRequest_Prepare::VideoBitrate_512_kbps;
const MediaRequest_Prepare_VideoBitrate MediaRequest_Prepare::VideoBitrate_MIN;
const MediaRequest_Prepare_VideoBitrate MediaRequest_Prepare::VideoBitrate_MAX;
const int MediaRequest_Prepare::VideoBitrate_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* MediaRequest_Prepare_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaRequest_Prepare_Type_descriptor_;
}
bool MediaRequest_Prepare_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MediaRequest_Prepare_Type MediaRequest_Prepare::AudioRequest;
const MediaRequest_Prepare_Type MediaRequest_Prepare::VideoRequest;
const MediaRequest_Prepare_Type MediaRequest_Prepare::Type_MIN;
const MediaRequest_Prepare_Type MediaRequest_Prepare::Type_MAX;
const int MediaRequest_Prepare::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MediaRequest_Prepare_Audio::kTrackIdFieldNumber;
const int MediaRequest_Prepare_Audio::kCodecTypeFieldNumber;
const int MediaRequest_Prepare_Audio::kBitrateFieldNumber;
const int MediaRequest_Prepare_Audio::kStreamIdxFieldNumber;
const int MediaRequest_Prepare_Audio::kOffsetSecsFieldNumber;
#endif  // !_MSC_VER

MediaRequest_Prepare_Audio::MediaRequest_Prepare_Audio()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaRequest_Prepare_Audio::InitAsDefaultInstance() {
}

MediaRequest_Prepare_Audio::MediaRequest_Prepare_Audio(const MediaRequest_Prepare_Audio& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaRequest_Prepare_Audio::SharedCtor() {
  _cached_size_ = 0;
  track_id_ = GOOGLE_LONGLONG(0);
  codec_type_ = 1;
  bitrate_ = 1;
  stream_idx_ = 0u;
  offset_secs_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaRequest_Prepare_Audio::~MediaRequest_Prepare_Audio() {
  SharedDtor();
}

void MediaRequest_Prepare_Audio::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MediaRequest_Prepare_Audio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaRequest_Prepare_Audio::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaRequest_Prepare_Audio_descriptor_;
}

const MediaRequest_Prepare_Audio& MediaRequest_Prepare_Audio::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_media_2eproto();
  return *default_instance_;
}

MediaRequest_Prepare_Audio* MediaRequest_Prepare_Audio::default_instance_ = NULL;

MediaRequest_Prepare_Audio* MediaRequest_Prepare_Audio::New() const {
  return new MediaRequest_Prepare_Audio;
}

void MediaRequest_Prepare_Audio::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    track_id_ = GOOGLE_LONGLONG(0);
    codec_type_ = 1;
    bitrate_ = 1;
    stream_idx_ = 0u;
    offset_secs_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaRequest_Prepare_Audio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 track_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &track_id_)));
          set_has_track_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_codec_type;
        break;
      }

      // required .Remote.MediaRequest.Prepare.AudioCodecType codec_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_codec_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Remote::MediaRequest_Prepare_AudioCodecType_IsValid(value)) {
            set_codec_type(static_cast< ::Remote::MediaRequest_Prepare_AudioCodecType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bitrate;
        break;
      }

      // required .Remote.MediaRequest.Prepare.AudioBitrate bitrate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bitrate:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Remote::MediaRequest_Prepare_AudioBitrate_IsValid(value)) {
            set_bitrate(static_cast< ::Remote::MediaRequest_Prepare_AudioBitrate >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_stream_idx;
        break;
      }

      // optional uint32 stream_idx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stream_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stream_idx_)));
          set_has_stream_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_offset_secs;
        break;
      }

      // optional uint32 offset_secs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset_secs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_secs_)));
          set_has_offset_secs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaRequest_Prepare_Audio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 track_id = 1;
  if (has_track_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->track_id(), output);
  }

  // required .Remote.MediaRequest.Prepare.AudioCodecType codec_type = 2;
  if (has_codec_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->codec_type(), output);
  }

  // required .Remote.MediaRequest.Prepare.AudioBitrate bitrate = 3;
  if (has_bitrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->bitrate(), output);
  }

  // optional uint32 stream_idx = 4;
  if (has_stream_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->stream_idx(), output);
  }

  // optional uint32 offset_secs = 5;
  if (has_offset_secs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->offset_secs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaRequest_Prepare_Audio::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 track_id = 1;
  if (has_track_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->track_id(), target);
  }

  // required .Remote.MediaRequest.Prepare.AudioCodecType codec_type = 2;
  if (has_codec_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->codec_type(), target);
  }

  // required .Remote.MediaRequest.Prepare.AudioBitrate bitrate = 3;
  if (has_bitrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->bitrate(), target);
  }

  // optional uint32 stream_idx = 4;
  if (has_stream_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->stream_idx(), target);
  }

  // optional uint32 offset_secs = 5;
  if (has_offset_secs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->offset_secs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaRequest_Prepare_Audio::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 track_id = 1;
    if (has_track_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->track_id());
    }

    // required .Remote.MediaRequest.Prepare.AudioCodecType codec_type = 2;
    if (has_codec_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->codec_type());
    }

    // required .Remote.MediaRequest.Prepare.AudioBitrate bitrate = 3;
    if (has_bitrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bitrate());
    }

    // optional uint32 stream_idx = 4;
    if (has_stream_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stream_idx());
    }

    // optional uint32 offset_secs = 5;
    if (has_offset_secs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset_secs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaRequest_Prepare_Audio::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaRequest_Prepare_Audio* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaRequest_Prepare_Audio*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaRequest_Prepare_Audio::MergeFrom(const MediaRequest_Prepare_Audio& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_track_id()) {
      set_track_id(from.track_id());
    }
    if (from.has_codec_type()) {
      set_codec_type(from.codec_type());
    }
    if (from.has_bitrate()) {
      set_bitrate(from.bitrate());
    }
    if (from.has_stream_idx()) {
      set_stream_idx(from.stream_idx());
    }
    if (from.has_offset_secs()) {
      set_offset_secs(from.offset_secs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaRequest_Prepare_Audio::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaRequest_Prepare_Audio::CopyFrom(const MediaRequest_Prepare_Audio& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaRequest_Prepare_Audio::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MediaRequest_Prepare_Audio::Swap(MediaRequest_Prepare_Audio* other) {
  if (other != this) {
    std::swap(track_id_, other->track_id_);
    std::swap(codec_type_, other->codec_type_);
    std::swap(bitrate_, other->bitrate_);
    std::swap(stream_idx_, other->stream_idx_);
    std::swap(offset_secs_, other->offset_secs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaRequest_Prepare_Audio::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaRequest_Prepare_Audio_descriptor_;
  metadata.reflection = MediaRequest_Prepare_Audio_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MediaRequest_Prepare_Video::kVideoIdFieldNumber;
const int MediaRequest_Prepare_Video::kCodecTypeFieldNumber;
const int MediaRequest_Prepare_Video::kAudioBitrateFieldNumber;
const int MediaRequest_Prepare_Video::kVideoBitrateFieldNumber;
const int MediaRequest_Prepare_Video::kOffsetSecsFieldNumber;
const int MediaRequest_Prepare_Video::kAudioStreamIdxFieldNumber;
const int MediaRequest_Prepare_Video::kVideoStreamIdxFieldNumber;
const int MediaRequest_Prepare_Video::kSubtitleStreamIdxFieldNumber;
#endif  // !_MSC_VER

MediaRequest_Prepare_Video::MediaRequest_Prepare_Video()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaRequest_Prepare_Video::InitAsDefaultInstance() {
}

MediaRequest_Prepare_Video::MediaRequest_Prepare_Video(const MediaRequest_Prepare_Video& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaRequest_Prepare_Video::SharedCtor() {
  _cached_size_ = 0;
  video_id_ = GOOGLE_LONGLONG(0);
  codec_type_ = 1;
  audio_bitrate_ = 1;
  video_bitrate_ = 1;
  offset_secs_ = 0u;
  audio_stream_idx_ = 0u;
  video_stream_idx_ = 0u;
  subtitle_stream_idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaRequest_Prepare_Video::~MediaRequest_Prepare_Video() {
  SharedDtor();
}

void MediaRequest_Prepare_Video::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MediaRequest_Prepare_Video::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaRequest_Prepare_Video::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaRequest_Prepare_Video_descriptor_;
}

const MediaRequest_Prepare_Video& MediaRequest_Prepare_Video::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_media_2eproto();
  return *default_instance_;
}

MediaRequest_Prepare_Video* MediaRequest_Prepare_Video::default_instance_ = NULL;

MediaRequest_Prepare_Video* MediaRequest_Prepare_Video::New() const {
  return new MediaRequest_Prepare_Video;
}

void MediaRequest_Prepare_Video::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    video_id_ = GOOGLE_LONGLONG(0);
    codec_type_ = 1;
    audio_bitrate_ = 1;
    video_bitrate_ = 1;
    offset_secs_ = 0u;
    audio_stream_idx_ = 0u;
    video_stream_idx_ = 0u;
    subtitle_stream_idx_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaRequest_Prepare_Video::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 video_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &video_id_)));
          set_has_video_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_codec_type;
        break;
      }

      // required .Remote.MediaRequest.Prepare.VideoCodecType codec_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_codec_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Remote::MediaRequest_Prepare_VideoCodecType_IsValid(value)) {
            set_codec_type(static_cast< ::Remote::MediaRequest_Prepare_VideoCodecType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_audio_bitrate;
        break;
      }

      // required .Remote.MediaRequest.Prepare.AudioBitrate audio_bitrate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_audio_bitrate:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Remote::MediaRequest_Prepare_AudioBitrate_IsValid(value)) {
            set_audio_bitrate(static_cast< ::Remote::MediaRequest_Prepare_AudioBitrate >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_video_bitrate;
        break;
      }

      // required .Remote.MediaRequest.Prepare.VideoBitrate video_bitrate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_video_bitrate:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Remote::MediaRequest_Prepare_VideoBitrate_IsValid(value)) {
            set_video_bitrate(static_cast< ::Remote::MediaRequest_Prepare_VideoBitrate >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_offset_secs;
        break;
      }

      // optional uint32 offset_secs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset_secs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_secs_)));
          set_has_offset_secs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_audio_stream_idx;
        break;
      }

      // optional uint32 audio_stream_idx = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_audio_stream_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audio_stream_idx_)));
          set_has_audio_stream_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_video_stream_idx;
        break;
      }

      // optional uint32 video_stream_idx = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_video_stream_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video_stream_idx_)));
          set_has_video_stream_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_subtitle_stream_idx;
        break;
      }

      // optional uint32 subtitle_stream_idx = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subtitle_stream_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subtitle_stream_idx_)));
          set_has_subtitle_stream_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaRequest_Prepare_Video::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 video_id = 1;
  if (has_video_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->video_id(), output);
  }

  // required .Remote.MediaRequest.Prepare.VideoCodecType codec_type = 2;
  if (has_codec_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->codec_type(), output);
  }

  // required .Remote.MediaRequest.Prepare.AudioBitrate audio_bitrate = 3;
  if (has_audio_bitrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->audio_bitrate(), output);
  }

  // required .Remote.MediaRequest.Prepare.VideoBitrate video_bitrate = 4;
  if (has_video_bitrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->video_bitrate(), output);
  }

  // optional uint32 offset_secs = 5;
  if (has_offset_secs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->offset_secs(), output);
  }

  // optional uint32 audio_stream_idx = 6;
  if (has_audio_stream_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->audio_stream_idx(), output);
  }

  // optional uint32 video_stream_idx = 7;
  if (has_video_stream_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->video_stream_idx(), output);
  }

  // optional uint32 subtitle_stream_idx = 8;
  if (has_subtitle_stream_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->subtitle_stream_idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaRequest_Prepare_Video::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 video_id = 1;
  if (has_video_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->video_id(), target);
  }

  // required .Remote.MediaRequest.Prepare.VideoCodecType codec_type = 2;
  if (has_codec_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->codec_type(), target);
  }

  // required .Remote.MediaRequest.Prepare.AudioBitrate audio_bitrate = 3;
  if (has_audio_bitrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->audio_bitrate(), target);
  }

  // required .Remote.MediaRequest.Prepare.VideoBitrate video_bitrate = 4;
  if (has_video_bitrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->video_bitrate(), target);
  }

  // optional uint32 offset_secs = 5;
  if (has_offset_secs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->offset_secs(), target);
  }

  // optional uint32 audio_stream_idx = 6;
  if (has_audio_stream_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->audio_stream_idx(), target);
  }

  // optional uint32 video_stream_idx = 7;
  if (has_video_stream_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->video_stream_idx(), target);
  }

  // optional uint32 subtitle_stream_idx = 8;
  if (has_subtitle_stream_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->subtitle_stream_idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaRequest_Prepare_Video::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 video_id = 1;
    if (has_video_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->video_id());
    }

    // required .Remote.MediaRequest.Prepare.VideoCodecType codec_type = 2;
    if (has_codec_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->codec_type());
    }

    // required .Remote.MediaRequest.Prepare.AudioBitrate audio_bitrate = 3;
    if (has_audio_bitrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->audio_bitrate());
    }

    // required .Remote.MediaRequest.Prepare.VideoBitrate video_bitrate = 4;
    if (has_video_bitrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->video_bitrate());
    }

    // optional uint32 offset_secs = 5;
    if (has_offset_secs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset_secs());
    }

    // optional uint32 audio_stream_idx = 6;
    if (has_audio_stream_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->audio_stream_idx());
    }

    // optional uint32 video_stream_idx = 7;
    if (has_video_stream_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video_stream_idx());
    }

    // optional uint32 subtitle_stream_idx = 8;
    if (has_subtitle_stream_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subtitle_stream_idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaRequest_Prepare_Video::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaRequest_Prepare_Video* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaRequest_Prepare_Video*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaRequest_Prepare_Video::MergeFrom(const MediaRequest_Prepare_Video& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_video_id()) {
      set_video_id(from.video_id());
    }
    if (from.has_codec_type()) {
      set_codec_type(from.codec_type());
    }
    if (from.has_audio_bitrate()) {
      set_audio_bitrate(from.audio_bitrate());
    }
    if (from.has_video_bitrate()) {
      set_video_bitrate(from.video_bitrate());
    }
    if (from.has_offset_secs()) {
      set_offset_secs(from.offset_secs());
    }
    if (from.has_audio_stream_idx()) {
      set_audio_stream_idx(from.audio_stream_idx());
    }
    if (from.has_video_stream_idx()) {
      set_video_stream_idx(from.video_stream_idx());
    }
    if (from.has_subtitle_stream_idx()) {
      set_subtitle_stream_idx(from.subtitle_stream_idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaRequest_Prepare_Video::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaRequest_Prepare_Video::CopyFrom(const MediaRequest_Prepare_Video& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaRequest_Prepare_Video::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MediaRequest_Prepare_Video::Swap(MediaRequest_Prepare_Video* other) {
  if (other != this) {
    std::swap(video_id_, other->video_id_);
    std::swap(codec_type_, other->codec_type_);
    std::swap(audio_bitrate_, other->audio_bitrate_);
    std::swap(video_bitrate_, other->video_bitrate_);
    std::swap(offset_secs_, other->offset_secs_);
    std::swap(audio_stream_idx_, other->audio_stream_idx_);
    std::swap(video_stream_idx_, other->video_stream_idx_);
    std::swap(subtitle_stream_idx_, other->subtitle_stream_idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaRequest_Prepare_Video::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaRequest_Prepare_Video_descriptor_;
  metadata.reflection = MediaRequest_Prepare_Video_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MediaRequest_Prepare::kTypeFieldNumber;
const int MediaRequest_Prepare::kAudioFieldNumber;
const int MediaRequest_Prepare::kVideoFieldNumber;
#endif  // !_MSC_VER

MediaRequest_Prepare::MediaRequest_Prepare()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaRequest_Prepare::InitAsDefaultInstance() {
  audio_ = const_cast< ::Remote::MediaRequest_Prepare_Audio*>(&::Remote::MediaRequest_Prepare_Audio::default_instance());
  video_ = const_cast< ::Remote::MediaRequest_Prepare_Video*>(&::Remote::MediaRequest_Prepare_Video::default_instance());
}

MediaRequest_Prepare::MediaRequest_Prepare(const MediaRequest_Prepare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaRequest_Prepare::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  audio_ = NULL;
  video_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaRequest_Prepare::~MediaRequest_Prepare() {
  SharedDtor();
}

void MediaRequest_Prepare::SharedDtor() {
  if (this != default_instance_) {
    delete audio_;
    delete video_;
  }
}

void MediaRequest_Prepare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaRequest_Prepare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaRequest_Prepare_descriptor_;
}

const MediaRequest_Prepare& MediaRequest_Prepare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_media_2eproto();
  return *default_instance_;
}

MediaRequest_Prepare* MediaRequest_Prepare::default_instance_ = NULL;

MediaRequest_Prepare* MediaRequest_Prepare::New() const {
  return new MediaRequest_Prepare;
}

void MediaRequest_Prepare::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_audio()) {
      if (audio_ != NULL) audio_->::Remote::MediaRequest_Prepare_Audio::Clear();
    }
    if (has_video()) {
      if (video_ != NULL) video_->::Remote::MediaRequest_Prepare_Video::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaRequest_Prepare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Remote.MediaRequest.Prepare.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Remote::MediaRequest_Prepare_Type_IsValid(value)) {
            set_type(static_cast< ::Remote::MediaRequest_Prepare_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_audio;
        break;
      }

      // optional .Remote.MediaRequest.Prepare.Audio audio = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_audio:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_audio()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_video;
        break;
      }

      // optional .Remote.MediaRequest.Prepare.Video video = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_video:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaRequest_Prepare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Remote.MediaRequest.Prepare.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .Remote.MediaRequest.Prepare.Audio audio = 2;
  if (has_audio()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->audio(), output);
  }

  // optional .Remote.MediaRequest.Prepare.Video video = 3;
  if (has_video()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->video(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaRequest_Prepare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Remote.MediaRequest.Prepare.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .Remote.MediaRequest.Prepare.Audio audio = 2;
  if (has_audio()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->audio(), target);
  }

  // optional .Remote.MediaRequest.Prepare.Video video = 3;
  if (has_video()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->video(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaRequest_Prepare::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Remote.MediaRequest.Prepare.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .Remote.MediaRequest.Prepare.Audio audio = 2;
    if (has_audio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->audio());
    }

    // optional .Remote.MediaRequest.Prepare.Video video = 3;
    if (has_video()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->video());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaRequest_Prepare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaRequest_Prepare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaRequest_Prepare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaRequest_Prepare::MergeFrom(const MediaRequest_Prepare& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_audio()) {
      mutable_audio()->::Remote::MediaRequest_Prepare_Audio::MergeFrom(from.audio());
    }
    if (from.has_video()) {
      mutable_video()->::Remote::MediaRequest_Prepare_Video::MergeFrom(from.video());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaRequest_Prepare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaRequest_Prepare::CopyFrom(const MediaRequest_Prepare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaRequest_Prepare::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_audio()) {
    if (!this->audio().IsInitialized()) return false;
  }
  if (has_video()) {
    if (!this->video().IsInitialized()) return false;
  }
  return true;
}

void MediaRequest_Prepare::Swap(MediaRequest_Prepare* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(audio_, other->audio_);
    std::swap(video_, other->video_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaRequest_Prepare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaRequest_Prepare_descriptor_;
  metadata.reflection = MediaRequest_Prepare_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MediaRequest_GetPart::kHandleFieldNumber;
const int MediaRequest_GetPart::kRequestedDataSizeFieldNumber;
#endif  // !_MSC_VER

MediaRequest_GetPart::MediaRequest_GetPart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaRequest_GetPart::InitAsDefaultInstance() {
}

MediaRequest_GetPart::MediaRequest_GetPart(const MediaRequest_GetPart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaRequest_GetPart::SharedCtor() {
  _cached_size_ = 0;
  handle_ = 0u;
  requested_data_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaRequest_GetPart::~MediaRequest_GetPart() {
  SharedDtor();
}

void MediaRequest_GetPart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MediaRequest_GetPart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaRequest_GetPart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaRequest_GetPart_descriptor_;
}

const MediaRequest_GetPart& MediaRequest_GetPart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_media_2eproto();
  return *default_instance_;
}

MediaRequest_GetPart* MediaRequest_GetPart::default_instance_ = NULL;

MediaRequest_GetPart* MediaRequest_GetPart::New() const {
  return new MediaRequest_GetPart;
}

void MediaRequest_GetPart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    handle_ = 0u;
    requested_data_size_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaRequest_GetPart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_requested_data_size;
        break;
      }

      // required uint32 requested_data_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requested_data_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requested_data_size_)));
          set_has_requested_data_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaRequest_GetPart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 handle = 1;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->handle(), output);
  }

  // required uint32 requested_data_size = 2;
  if (has_requested_data_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->requested_data_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaRequest_GetPart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 handle = 1;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->handle(), target);
  }

  // required uint32 requested_data_size = 2;
  if (has_requested_data_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->requested_data_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaRequest_GetPart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 handle = 1;
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->handle());
    }

    // required uint32 requested_data_size = 2;
    if (has_requested_data_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->requested_data_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaRequest_GetPart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaRequest_GetPart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaRequest_GetPart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaRequest_GetPart::MergeFrom(const MediaRequest_GetPart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_handle()) {
      set_handle(from.handle());
    }
    if (from.has_requested_data_size()) {
      set_requested_data_size(from.requested_data_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaRequest_GetPart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaRequest_GetPart::CopyFrom(const MediaRequest_GetPart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaRequest_GetPart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MediaRequest_GetPart::Swap(MediaRequest_GetPart* other) {
  if (other != this) {
    std::swap(handle_, other->handle_);
    std::swap(requested_data_size_, other->requested_data_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaRequest_GetPart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaRequest_GetPart_descriptor_;
  metadata.reflection = MediaRequest_GetPart_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MediaRequest_Terminate::kHandleFieldNumber;
#endif  // !_MSC_VER

MediaRequest_Terminate::MediaRequest_Terminate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaRequest_Terminate::InitAsDefaultInstance() {
}

MediaRequest_Terminate::MediaRequest_Terminate(const MediaRequest_Terminate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaRequest_Terminate::SharedCtor() {
  _cached_size_ = 0;
  handle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaRequest_Terminate::~MediaRequest_Terminate() {
  SharedDtor();
}

void MediaRequest_Terminate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MediaRequest_Terminate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaRequest_Terminate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaRequest_Terminate_descriptor_;
}

const MediaRequest_Terminate& MediaRequest_Terminate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_media_2eproto();
  return *default_instance_;
}

MediaRequest_Terminate* MediaRequest_Terminate::default_instance_ = NULL;

MediaRequest_Terminate* MediaRequest_Terminate::New() const {
  return new MediaRequest_Terminate;
}

void MediaRequest_Terminate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    handle_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaRequest_Terminate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaRequest_Terminate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 handle = 1;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->handle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaRequest_Terminate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 handle = 1;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->handle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaRequest_Terminate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 handle = 1;
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->handle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaRequest_Terminate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaRequest_Terminate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaRequest_Terminate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaRequest_Terminate::MergeFrom(const MediaRequest_Terminate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_handle()) {
      set_handle(from.handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaRequest_Terminate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaRequest_Terminate::CopyFrom(const MediaRequest_Terminate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaRequest_Terminate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MediaRequest_Terminate::Swap(MediaRequest_Terminate* other) {
  if (other != this) {
    std::swap(handle_, other->handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaRequest_Terminate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaRequest_Terminate_descriptor_;
  metadata.reflection = MediaRequest_Terminate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MediaRequest::kTypeFieldNumber;
const int MediaRequest::kPrepareFieldNumber;
const int MediaRequest::kGetPartFieldNumber;
const int MediaRequest::kTerminateFieldNumber;
#endif  // !_MSC_VER

MediaRequest::MediaRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaRequest::InitAsDefaultInstance() {
  prepare_ = const_cast< ::Remote::MediaRequest_Prepare*>(&::Remote::MediaRequest_Prepare::default_instance());
  get_part_ = const_cast< ::Remote::MediaRequest_GetPart*>(&::Remote::MediaRequest_GetPart::default_instance());
  terminate_ = const_cast< ::Remote::MediaRequest_Terminate*>(&::Remote::MediaRequest_Terminate::default_instance());
}

MediaRequest::MediaRequest(const MediaRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  prepare_ = NULL;
  get_part_ = NULL;
  terminate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaRequest::~MediaRequest() {
  SharedDtor();
}

void MediaRequest::SharedDtor() {
  if (this != default_instance_) {
    delete prepare_;
    delete get_part_;
    delete terminate_;
  }
}

void MediaRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaRequest_descriptor_;
}

const MediaRequest& MediaRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_media_2eproto();
  return *default_instance_;
}

MediaRequest* MediaRequest::default_instance_ = NULL;

MediaRequest* MediaRequest::New() const {
  return new MediaRequest;
}

void MediaRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_prepare()) {
      if (prepare_ != NULL) prepare_->::Remote::MediaRequest_Prepare::Clear();
    }
    if (has_get_part()) {
      if (get_part_ != NULL) get_part_->::Remote::MediaRequest_GetPart::Clear();
    }
    if (has_terminate()) {
      if (terminate_ != NULL) terminate_->::Remote::MediaRequest_Terminate::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Remote.MediaRequest.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Remote::MediaRequest_Type_IsValid(value)) {
            set_type(static_cast< ::Remote::MediaRequest_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_prepare;
        break;
      }

      // optional .Remote.MediaRequest.Prepare prepare = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prepare:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prepare()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_get_part;
        break;
      }

      // optional .Remote.MediaRequest.GetPart get_part = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get_part:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_part()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_terminate;
        break;
      }

      // optional .Remote.MediaRequest.Terminate terminate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_terminate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_terminate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Remote.MediaRequest.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .Remote.MediaRequest.Prepare prepare = 2;
  if (has_prepare()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->prepare(), output);
  }

  // optional .Remote.MediaRequest.GetPart get_part = 3;
  if (has_get_part()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->get_part(), output);
  }

  // optional .Remote.MediaRequest.Terminate terminate = 4;
  if (has_terminate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->terminate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Remote.MediaRequest.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .Remote.MediaRequest.Prepare prepare = 2;
  if (has_prepare()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->prepare(), target);
  }

  // optional .Remote.MediaRequest.GetPart get_part = 3;
  if (has_get_part()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->get_part(), target);
  }

  // optional .Remote.MediaRequest.Terminate terminate = 4;
  if (has_terminate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->terminate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Remote.MediaRequest.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .Remote.MediaRequest.Prepare prepare = 2;
    if (has_prepare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prepare());
    }

    // optional .Remote.MediaRequest.GetPart get_part = 3;
    if (has_get_part()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_part());
    }

    // optional .Remote.MediaRequest.Terminate terminate = 4;
    if (has_terminate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->terminate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaRequest::MergeFrom(const MediaRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_prepare()) {
      mutable_prepare()->::Remote::MediaRequest_Prepare::MergeFrom(from.prepare());
    }
    if (from.has_get_part()) {
      mutable_get_part()->::Remote::MediaRequest_GetPart::MergeFrom(from.get_part());
    }
    if (from.has_terminate()) {
      mutable_terminate()->::Remote::MediaRequest_Terminate::MergeFrom(from.terminate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaRequest::CopyFrom(const MediaRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_prepare()) {
    if (!this->prepare().IsInitialized()) return false;
  }
  if (has_get_part()) {
    if (!this->get_part().IsInitialized()) return false;
  }
  if (has_terminate()) {
    if (!this->terminate().IsInitialized()) return false;
  }
  return true;
}

void MediaRequest::Swap(MediaRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(prepare_, other->prepare_);
    std::swap(get_part_, other->get_part_);
    std::swap(terminate_, other->terminate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaRequest_descriptor_;
  metadata.reflection = MediaRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MediaResponse_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaResponse_Type_descriptor_;
}
bool MediaResponse_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MediaResponse_Type MediaResponse::TypePrepareResult;
const MediaResponse_Type MediaResponse::TypePartResult;
const MediaResponse_Type MediaResponse::TypeTerminateResult;
const MediaResponse_Type MediaResponse::Type_MIN;
const MediaResponse_Type MediaResponse::Type_MAX;
const int MediaResponse::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MediaResponse_PrepareResult::kHandleFieldNumber;
#endif  // !_MSC_VER

MediaResponse_PrepareResult::MediaResponse_PrepareResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaResponse_PrepareResult::InitAsDefaultInstance() {
}

MediaResponse_PrepareResult::MediaResponse_PrepareResult(const MediaResponse_PrepareResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaResponse_PrepareResult::SharedCtor() {
  _cached_size_ = 0;
  handle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaResponse_PrepareResult::~MediaResponse_PrepareResult() {
  SharedDtor();
}

void MediaResponse_PrepareResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MediaResponse_PrepareResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaResponse_PrepareResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaResponse_PrepareResult_descriptor_;
}

const MediaResponse_PrepareResult& MediaResponse_PrepareResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_media_2eproto();
  return *default_instance_;
}

MediaResponse_PrepareResult* MediaResponse_PrepareResult::default_instance_ = NULL;

MediaResponse_PrepareResult* MediaResponse_PrepareResult::New() const {
  return new MediaResponse_PrepareResult;
}

void MediaResponse_PrepareResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    handle_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaResponse_PrepareResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaResponse_PrepareResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 handle = 1;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->handle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaResponse_PrepareResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 handle = 1;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->handle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaResponse_PrepareResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 handle = 1;
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->handle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaResponse_PrepareResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaResponse_PrepareResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaResponse_PrepareResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaResponse_PrepareResult::MergeFrom(const MediaResponse_PrepareResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_handle()) {
      set_handle(from.handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaResponse_PrepareResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaResponse_PrepareResult::CopyFrom(const MediaResponse_PrepareResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaResponse_PrepareResult::IsInitialized() const {

  return true;
}

void MediaResponse_PrepareResult::Swap(MediaResponse_PrepareResult* other) {
  if (other != this) {
    std::swap(handle_, other->handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaResponse_PrepareResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaResponse_PrepareResult_descriptor_;
  metadata.reflection = MediaResponse_PrepareResult_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MediaResponse_PartResult::kDataFieldNumber;
#endif  // !_MSC_VER

MediaResponse_PartResult::MediaResponse_PartResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaResponse_PartResult::InitAsDefaultInstance() {
}

MediaResponse_PartResult::MediaResponse_PartResult(const MediaResponse_PartResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaResponse_PartResult::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaResponse_PartResult::~MediaResponse_PartResult() {
  SharedDtor();
}

void MediaResponse_PartResult::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void MediaResponse_PartResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaResponse_PartResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaResponse_PartResult_descriptor_;
}

const MediaResponse_PartResult& MediaResponse_PartResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_media_2eproto();
  return *default_instance_;
}

MediaResponse_PartResult* MediaResponse_PartResult::default_instance_ = NULL;

MediaResponse_PartResult* MediaResponse_PartResult::New() const {
  return new MediaResponse_PartResult;
}

void MediaResponse_PartResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaResponse_PartResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaResponse_PartResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaResponse_PartResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaResponse_PartResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaResponse_PartResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaResponse_PartResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaResponse_PartResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaResponse_PartResult::MergeFrom(const MediaResponse_PartResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaResponse_PartResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaResponse_PartResult::CopyFrom(const MediaResponse_PartResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaResponse_PartResult::IsInitialized() const {

  return true;
}

void MediaResponse_PartResult::Swap(MediaResponse_PartResult* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaResponse_PartResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaResponse_PartResult_descriptor_;
  metadata.reflection = MediaResponse_PartResult_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

MediaResponse_TerminateResult::MediaResponse_TerminateResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaResponse_TerminateResult::InitAsDefaultInstance() {
}

MediaResponse_TerminateResult::MediaResponse_TerminateResult(const MediaResponse_TerminateResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaResponse_TerminateResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaResponse_TerminateResult::~MediaResponse_TerminateResult() {
  SharedDtor();
}

void MediaResponse_TerminateResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MediaResponse_TerminateResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaResponse_TerminateResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaResponse_TerminateResult_descriptor_;
}

const MediaResponse_TerminateResult& MediaResponse_TerminateResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_media_2eproto();
  return *default_instance_;
}

MediaResponse_TerminateResult* MediaResponse_TerminateResult::default_instance_ = NULL;

MediaResponse_TerminateResult* MediaResponse_TerminateResult::New() const {
  return new MediaResponse_TerminateResult;
}

void MediaResponse_TerminateResult::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaResponse_TerminateResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MediaResponse_TerminateResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaResponse_TerminateResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaResponse_TerminateResult::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaResponse_TerminateResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaResponse_TerminateResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaResponse_TerminateResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaResponse_TerminateResult::MergeFrom(const MediaResponse_TerminateResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaResponse_TerminateResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaResponse_TerminateResult::CopyFrom(const MediaResponse_TerminateResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaResponse_TerminateResult::IsInitialized() const {

  return true;
}

void MediaResponse_TerminateResult::Swap(MediaResponse_TerminateResult* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaResponse_TerminateResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaResponse_TerminateResult_descriptor_;
  metadata.reflection = MediaResponse_TerminateResult_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MediaResponse::kTypeFieldNumber;
const int MediaResponse::kPrepareResultFieldNumber;
const int MediaResponse::kPartResultFieldNumber;
const int MediaResponse::kTerminateResultFieldNumber;
#endif  // !_MSC_VER

MediaResponse::MediaResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaResponse::InitAsDefaultInstance() {
  prepare_result_ = const_cast< ::Remote::MediaResponse_PrepareResult*>(&::Remote::MediaResponse_PrepareResult::default_instance());
  part_result_ = const_cast< ::Remote::MediaResponse_PartResult*>(&::Remote::MediaResponse_PartResult::default_instance());
  terminate_result_ = const_cast< ::Remote::MediaResponse_TerminateResult*>(&::Remote::MediaResponse_TerminateResult::default_instance());
}

MediaResponse::MediaResponse(const MediaResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaResponse::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  prepare_result_ = NULL;
  part_result_ = NULL;
  terminate_result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaResponse::~MediaResponse() {
  SharedDtor();
}

void MediaResponse::SharedDtor() {
  if (this != default_instance_) {
    delete prepare_result_;
    delete part_result_;
    delete terminate_result_;
  }
}

void MediaResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaResponse_descriptor_;
}

const MediaResponse& MediaResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_media_2eproto();
  return *default_instance_;
}

MediaResponse* MediaResponse::default_instance_ = NULL;

MediaResponse* MediaResponse::New() const {
  return new MediaResponse;
}

void MediaResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_prepare_result()) {
      if (prepare_result_ != NULL) prepare_result_->::Remote::MediaResponse_PrepareResult::Clear();
    }
    if (has_part_result()) {
      if (part_result_ != NULL) part_result_->::Remote::MediaResponse_PartResult::Clear();
    }
    if (has_terminate_result()) {
      if (terminate_result_ != NULL) terminate_result_->::Remote::MediaResponse_TerminateResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Remote.MediaResponse.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Remote::MediaResponse_Type_IsValid(value)) {
            set_type(static_cast< ::Remote::MediaResponse_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_prepare_result;
        break;
      }

      // optional .Remote.MediaResponse.PrepareResult prepare_result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prepare_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prepare_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_part_result;
        break;
      }

      // optional .Remote.MediaResponse.PartResult part_result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_part_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_part_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_terminate_result;
        break;
      }

      // optional .Remote.MediaResponse.TerminateResult terminate_result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_terminate_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_terminate_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Remote.MediaResponse.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .Remote.MediaResponse.PrepareResult prepare_result = 2;
  if (has_prepare_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->prepare_result(), output);
  }

  // optional .Remote.MediaResponse.PartResult part_result = 3;
  if (has_part_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->part_result(), output);
  }

  // optional .Remote.MediaResponse.TerminateResult terminate_result = 4;
  if (has_terminate_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->terminate_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Remote.MediaResponse.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .Remote.MediaResponse.PrepareResult prepare_result = 2;
  if (has_prepare_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->prepare_result(), target);
  }

  // optional .Remote.MediaResponse.PartResult part_result = 3;
  if (has_part_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->part_result(), target);
  }

  // optional .Remote.MediaResponse.TerminateResult terminate_result = 4;
  if (has_terminate_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->terminate_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Remote.MediaResponse.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .Remote.MediaResponse.PrepareResult prepare_result = 2;
    if (has_prepare_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prepare_result());
    }

    // optional .Remote.MediaResponse.PartResult part_result = 3;
    if (has_part_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->part_result());
    }

    // optional .Remote.MediaResponse.TerminateResult terminate_result = 4;
    if (has_terminate_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->terminate_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaResponse::MergeFrom(const MediaResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_prepare_result()) {
      mutable_prepare_result()->::Remote::MediaResponse_PrepareResult::MergeFrom(from.prepare_result());
    }
    if (from.has_part_result()) {
      mutable_part_result()->::Remote::MediaResponse_PartResult::MergeFrom(from.part_result());
    }
    if (from.has_terminate_result()) {
      mutable_terminate_result()->::Remote::MediaResponse_TerminateResult::MergeFrom(from.terminate_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaResponse::CopyFrom(const MediaResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MediaResponse::Swap(MediaResponse* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(prepare_result_, other->prepare_result_);
    std::swap(part_result_, other->part_result_);
    std::swap(terminate_result_, other->terminate_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaResponse_descriptor_;
  metadata.reflection = MediaResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Remote

// @@protoc_insertion_point(global_scope)
