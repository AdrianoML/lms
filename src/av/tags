!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	2	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
addStream	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		void addStream(int inputStreamId);$/;"	p	language:C++	class:Av::TranscodeParameters
Audio	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^		Audio,$/;"	m	language:C++	class:Av::Stream::Type
Av	/home/emericp/Documents/Progs/lms/src/av/AvInfo.cpp	/^namespace Av {$/;"	n	language:C++	file:
Av	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^namespace Av$/;"	n	language:C++
Av	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.cpp	/^namespace Av {$/;"	n	language:C++	file:
Av	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^namespace Av {$/;"	n	language:C++
Av::averror_to_string	/home/emericp/Documents/Progs/lms/src/av/AvInfo.cpp	/^static std::string averror_to_string(int error)$/;"	f	language:C++	namespace:Av
Av::AvInit	/home/emericp/Documents/Progs/lms/src/av/AvInfo.cpp	/^void AvInit()$/;"	f	language:C++	namespace:Av
Av::AvInit	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^void AvInit();$/;"	p	language:C++	namespace:Av
Av::Encoding	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^enum class Encoding$/;"	c	language:C++	namespace:Av
Av::Encoding::FLA	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^	FLA,$/;"	m	language:C++	class:Av::Encoding
Av::Encoding::FLV	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^	FLV,$/;"	m	language:C++	class:Av::Encoding
Av::Encoding::M4A	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^	M4A,$/;"	m	language:C++	class:Av::Encoding
Av::Encoding::M4V	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^	M4V,$/;"	m	language:C++	class:Av::Encoding
Av::Encoding::MP3	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^	MP3,$/;"	m	language:C++	class:Av::Encoding
Av::Encoding::OGA	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^	OGA,$/;"	m	language:C++	class:Av::Encoding
Av::Encoding::OGV	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^	OGV,$/;"	m	language:C++	class:Av::Encoding
Av::Encoding::WEBMA	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^	WEBMA,$/;"	m	language:C++	class:Av::Encoding
Av::Encoding::WEBMV	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^	WEBMV,$/;"	m	language:C++	class:Av::Encoding
Av::encoding_to_mimetype	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.cpp	/^std::string encoding_to_mimetype(Encoding encoding)$/;"	f	language:C++	namespace:Av
Av::encoding_to_mimetype	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^std::string encoding_to_mimetype(Encoding encoding);$/;"	p	language:C++	namespace:Av
Av::execNames	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.cpp	/^const std::vector<std::string> execNames =$/;"	m	language:C++	namespace:Av	file:
Av::getMetaDataFromDictionnary	/home/emericp/Documents/Progs/lms/src/av/AvInfo.cpp	/^getMetaDataFromDictionnary(AVDictionary* dictionnary, std::map<std::string, std::string>& res)$/;"	f	language:C++	namespace:Av
Av::MediaFile	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^class MediaFile$/;"	c	language:C++	namespace:Av
Av::MediaFile::getAttachedPictures	/home/emericp/Documents/Progs/lms/src/av/AvInfo.cpp	/^MediaFile::getAttachedPictures(std::size_t nbMaxPictures) const$/;"	f	language:C++	class:Av::MediaFile
Av::MediaFile::getAttachedPictures	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^		std::vector<Picture>	getAttachedPictures(std::size_t nbMaxPictures) const;$/;"	p	language:C++	class:Av::MediaFile
Av::MediaFile::getBestStreamId	/home/emericp/Documents/Progs/lms/src/av/AvInfo.cpp	/^MediaFile::getBestStreamId(Stream::Type type) const$/;"	f	language:C++	class:Av::MediaFile
Av::MediaFile::getBestStreamId	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^		int			getBestStreamId(Stream::Type type) const; \/\/ -1 if failure\/unknown$/;"	p	language:C++	class:Av::MediaFile
Av::MediaFile::getDuration	/home/emericp/Documents/Progs/lms/src/av/AvInfo.cpp	/^MediaFile::getDuration() const$/;"	f	language:C++	class:Av::MediaFile
Av::MediaFile::getDuration	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^		boost::posix_time::time_duration	getDuration() const;$/;"	p	language:C++	class:Av::MediaFile
Av::MediaFile::getMetaData	/home/emericp/Documents/Progs/lms/src/av/AvInfo.cpp	/^MediaFile::getMetaData(void)$/;"	f	language:C++	class:Av::MediaFile
Av::MediaFile::getMetaData	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^		std::map<std::string, std::string>	getMetaData(void);$/;"	p	language:C++	class:Av::MediaFile
Av::MediaFile::getPath	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^		boost::filesystem::path			getPath() const {return _p;};$/;"	f	language:C++	class:Av::MediaFile
Av::MediaFile::getStreams	/home/emericp/Documents/Progs/lms/src/av/AvInfo.cpp	/^MediaFile::getStreams(Stream::Type type) const$/;"	f	language:C++	class:Av::MediaFile
Av::MediaFile::getStreams	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^		std::vector<Stream>	getStreams(Stream::Type type) const;$/;"	p	language:C++	class:Av::MediaFile
Av::MediaFile::hasAttachedPictures	/home/emericp/Documents/Progs/lms/src/av/AvInfo.cpp	/^MediaFile::hasAttachedPictures(void) const$/;"	f	language:C++	class:Av::MediaFile
Av::MediaFile::hasAttachedPictures	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^		bool			hasAttachedPictures(void) const;$/;"	p	language:C++	class:Av::MediaFile
Av::MediaFile::MediaFile	/home/emericp/Documents/Progs/lms/src/av/AvInfo.cpp	/^MediaFile::MediaFile(const boost::filesystem::path& p)$/;"	f	language:C++	class:Av::MediaFile
Av::MediaFile::MediaFile	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^		MediaFile(const boost::filesystem::path& p);$/;"	p	language:C++	class:Av::MediaFile
Av::MediaFile::open	/home/emericp/Documents/Progs/lms/src/av/AvInfo.cpp	/^MediaFile::open(void)$/;"	f	language:C++	class:Av::MediaFile
Av::MediaFile::open	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^		bool open(void);$/;"	p	language:C++	class:Av::MediaFile
Av::MediaFile::scan	/home/emericp/Documents/Progs/lms/src/av/AvInfo.cpp	/^MediaFile::scan(void)$/;"	f	language:C++	class:Av::MediaFile
Av::MediaFile::scan	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^		bool scan(void);$/;"	p	language:C++	class:Av::MediaFile
Av::MediaFile::_context	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^		AVFormatContext* _context;$/;"	m	language:C++	class:Av::MediaFile
Av::MediaFile::_p	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^		boost::filesystem::path	_p;$/;"	m	language:C++	class:Av::MediaFile
Av::MediaFile::~MediaFile	/home/emericp/Documents/Progs/lms/src/av/AvInfo.cpp	/^MediaFile::~MediaFile()$/;"	f	language:C++	class:Av::MediaFile
Av::MediaFile::~MediaFile	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^		~MediaFile();$/;"	p	language:C++	class:Av::MediaFile
Av::Picture	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^struct Picture$/;"	s	language:C++	namespace:Av
Av::Picture::data	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^	std::vector<uint8_t> data;$/;"	m	language:C++	struct:Av::Picture
Av::Picture::mimeType	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^	std::string mimeType;$/;"	m	language:C++	struct:Av::Picture
Av::Stream	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^struct Stream$/;"	s	language:C++	namespace:Av
Av::Stream::bitrate	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^	std::size_t     bitrate;$/;"	m	language:C++	struct:Av::Stream
Av::Stream::desc	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^	std::string	desc;		\/\/ Description of the stream$/;"	m	language:C++	struct:Av::Stream
Av::Stream::id	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^	int		id;$/;"	m	language:C++	struct:Av::Stream
Av::Stream::Type	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^	enum class Type$/;"	c	language:C++	struct:Av::Stream
Av::Stream::type	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^	Type		type;$/;"	m	language:C++	struct:Av::Stream
Av::Stream::Type::Audio	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^		Audio,$/;"	m	language:C++	class:Av::Stream::Type
Av::Stream::Type::Subtitle	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^		Subtitle,$/;"	m	language:C++	class:Av::Stream::Type
Av::Stream::Type::Video	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^		Video,$/;"	m	language:C++	class:Av::Stream::Type
Av::streamType_to_string	/home/emericp/Documents/Progs/lms/src/av/AvInfo.cpp	/^static std::string streamType_to_string(Stream::Type type)$/;"	f	language:C++	namespace:Av
Av::TranscodeParameters	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^class TranscodeParameters$/;"	c	language:C++	namespace:Av
Av::TranscodeParameters::addStream	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		void addStream(int inputStreamId);$/;"	p	language:C++	class:Av::TranscodeParameters
Av::TranscodeParameters::getBitrate	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		std::size_t				getBitrate(Stream::Type type) { return _outputBitrate[type]; }$/;"	f	language:C++	class:Av::TranscodeParameters
Av::TranscodeParameters::getEncoding	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		Encoding				getEncoding(void) const { return _encoding; }$/;"	f	language:C++	class:Av::TranscodeParameters
Av::TranscodeParameters::getFile	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		boost::filesystem::path			getFile(void) const { return _path; }$/;"	f	language:C++	class:Av::TranscodeParameters
Av::TranscodeParameters::getOffset	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		boost::posix_time::time_duration	getOffset(void) const { return _offset; }$/;"	f	language:C++	class:Av::TranscodeParameters
Av::TranscodeParameters::getSelectedStreamIds	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		std::vector<int>			getSelectedStreamIds(void) const { return _selectedStreams; }$/;"	f	language:C++	class:Av::TranscodeParameters
Av::TranscodeParameters::setBitrate	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		void setBitrate(Stream::Type type, std::size_t bitrate)	{ _outputBitrate[type] = bitrate; }$/;"	f	language:C++	class:Av::TranscodeParameters
Av::TranscodeParameters::setEncoding	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		void setEncoding(Encoding encoding)		{ _encoding = encoding; }$/;"	f	language:C++	class:Av::TranscodeParameters
Av::TranscodeParameters::setFile	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		void setFile(boost::filesystem::path p)		{_path = p; }$/;"	f	language:C++	class:Av::TranscodeParameters
Av::TranscodeParameters::setOffset	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		void setOffset(boost::posix_time::time_duration offset)	{_offset = offset; }$/;"	f	language:C++	class:Av::TranscodeParameters
Av::TranscodeParameters::_encoding	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		Encoding				_encoding = Encoding::MP3;$/;"	m	language:C++	class:Av::TranscodeParameters
Av::TranscodeParameters::_offset	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		boost::posix_time::time_duration	_offset = boost::posix_time::seconds(0);$/;"	m	language:C++	class:Av::TranscodeParameters
Av::TranscodeParameters::_outputBitrate	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		std::map<Stream::Type, std::size_t>	_outputBitrate = { {Stream::Type::Audio, 0}, { Stream::Type::Video, 0}, { Stream::Type::Subtitle, 0} };$/;"	m	language:C++	class:Av::TranscodeParameters
Av::TranscodeParameters::_path	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		boost::filesystem::path			_path;$/;"	m	language:C++	class:Av::TranscodeParameters
Av::TranscodeParameters::_selectedStreams	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		std::vector<int>			_selectedStreams;$/;"	m	language:C++	class:Av::TranscodeParameters
Av::Transcoder	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^class Transcoder$/;"	c	language:C++	namespace:Av
Av::Transcoder::init	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.cpp	/^Transcoder::init()$/;"	f	language:C++	class:Av::Transcoder
Av::Transcoder::init	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		static void init();$/;"	p	language:C++	class:Av::Transcoder
Av::Transcoder::isComplete	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		bool isComplete(void);$/;"	p	language:C++	class:Av::Transcoder
Av::Transcoder::killChild	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.cpp	/^Transcoder::killChild()$/;"	f	language:C++	class:Av::Transcoder
Av::Transcoder::killChild	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		void killChild();$/;"	p	language:C++	class:Av::Transcoder
Av::Transcoder::process	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.cpp	/^Transcoder::process(std::vector<unsigned char>& output, std::size_t maxSize)$/;"	f	language:C++	class:Av::Transcoder
Av::Transcoder::process	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		void process(std::vector<unsigned char>& output, std::size_t maxSize);$/;"	p	language:C++	class:Av::Transcoder
Av::Transcoder::start	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.cpp	/^Transcoder::start()$/;"	f	language:C++	class:Av::Transcoder
Av::Transcoder::start	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		bool start();$/;"	p	language:C++	class:Av::Transcoder
Av::Transcoder::Transcoder	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.cpp	/^Transcoder::Transcoder(TrasncodeParameters parameters)$/;"	f	language:C++	class:Av::Transcoder
Av::Transcoder::Transcoder	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		Transcoder(TranscodeParameters parameters);$/;"	p	language:C++	class:Av::Transcoder
Av::Transcoder::waitChild	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.cpp	/^Transcoder::waitChild()$/;"	f	language:C++	class:Av::Transcoder
Av::Transcoder::waitChild	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		void waitChild();$/;"	p	language:C++	class:Av::Transcoder
Av::Transcoder::_avConvPath	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.cpp	/^boost::filesystem::path	Transcoder::_avConvPath = boost::filesystem::path();$/;"	m	language:C++	class:Av::Transcoder	file:
Av::Transcoder::_avConvPath	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		static boost::filesystem::path _avConvPath;$/;"	m	language:C++	class:Av::Transcoder
Av::Transcoder::_child	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		std::shared_ptr<boost::process::child>	_child;$/;"	m	language:C++	class:Av::Transcoder
Av::Transcoder::_in	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		std::istream		_in;$/;"	m	language:C++	class:Av::Transcoder
Av::Transcoder::_is	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		boost::iostreams::stream_buffer<boost::iostreams::file_descriptor_source> _is;$/;"	m	language:C++	class:Av::Transcoder
Av::Transcoder::_isComplete	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		bool		_isComplete;$/;"	m	language:C++	class:Av::Transcoder
Av::Transcoder::_mutex	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.cpp	/^boost::mutex	Transcoder::_mutex;$/;"	m	language:C++	class:Av::Transcoder	file:
Av::Transcoder::_mutex	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		static boost::mutex     _mutex;$/;"	m	language:C++	class:Av::Transcoder
Av::Transcoder::_outputPipe	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		boost::process::pipe _outputPipe;$/;"	m	language:C++	class:Av::Transcoder
Av::Transcoder::_parameters	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		TranscodeParameters	_parameters;$/;"	m	language:C++	class:Av::Transcoder
Av::Transcoder::_source	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		boost::iostreams::file_descriptor_source _source;$/;"	m	language:C++	class:Av::Transcoder
Av::Transcoder::~Transcoder	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.cpp	/^Transcoder::~Transcoder()$/;"	f	language:C++	class:Av::Transcoder
averror_to_string	/home/emericp/Documents/Progs/lms/src/av/AvInfo.cpp	/^static std::string averror_to_string(int error)$/;"	f	language:C++	namespace:Av
AvInit	/home/emericp/Documents/Progs/lms/src/av/AvInfo.cpp	/^void AvInit()$/;"	f	language:C++	namespace:Av
AvInit	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^void AvInit();$/;"	p	language:C++	namespace:Av
AV_INFO_HPP	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	23;"	d	language:C++
bitrate	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^	std::size_t     bitrate;$/;"	m	language:C++	struct:Av::Stream
data	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^	std::vector<uint8_t> data;$/;"	m	language:C++	struct:Av::Picture
desc	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^	std::string	desc;		\/\/ Description of the stream$/;"	m	language:C++	struct:Av::Stream
Encoding	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^enum class Encoding$/;"	c	language:C++	namespace:Av
encoding_to_mimetype	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.cpp	/^std::string encoding_to_mimetype(Encoding encoding)$/;"	f	language:C++	namespace:Av
encoding_to_mimetype	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^std::string encoding_to_mimetype(Encoding encoding);$/;"	p	language:C++	namespace:Av
execNames	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.cpp	/^const std::vector<std::string> execNames =$/;"	m	language:C++	namespace:Av	file:
FLA	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^	FLA,$/;"	m	language:C++	class:Av::Encoding
FLV	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^	FLV,$/;"	m	language:C++	class:Av::Encoding
getAttachedPictures	/home/emericp/Documents/Progs/lms/src/av/AvInfo.cpp	/^MediaFile::getAttachedPictures(std::size_t nbMaxPictures) const$/;"	f	language:C++	class:Av::MediaFile
getAttachedPictures	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^		std::vector<Picture>	getAttachedPictures(std::size_t nbMaxPictures) const;$/;"	p	language:C++	class:Av::MediaFile
getBestStreamId	/home/emericp/Documents/Progs/lms/src/av/AvInfo.cpp	/^MediaFile::getBestStreamId(Stream::Type type) const$/;"	f	language:C++	class:Av::MediaFile
getBestStreamId	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^		int			getBestStreamId(Stream::Type type) const; \/\/ -1 if failure\/unknown$/;"	p	language:C++	class:Av::MediaFile
getBitrate	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		std::size_t				getBitrate(Stream::Type type) { return _outputBitrate[type]; }$/;"	f	language:C++	class:Av::TranscodeParameters
getDuration	/home/emericp/Documents/Progs/lms/src/av/AvInfo.cpp	/^MediaFile::getDuration() const$/;"	f	language:C++	class:Av::MediaFile
getDuration	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^		boost::posix_time::time_duration	getDuration() const;$/;"	p	language:C++	class:Av::MediaFile
getEncoding	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		Encoding				getEncoding(void) const { return _encoding; }$/;"	f	language:C++	class:Av::TranscodeParameters
getFile	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		boost::filesystem::path			getFile(void) const { return _path; }$/;"	f	language:C++	class:Av::TranscodeParameters
getMetaData	/home/emericp/Documents/Progs/lms/src/av/AvInfo.cpp	/^MediaFile::getMetaData(void)$/;"	f	language:C++	class:Av::MediaFile
getMetaData	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^		std::map<std::string, std::string>	getMetaData(void);$/;"	p	language:C++	class:Av::MediaFile
getMetaDataFromDictionnary	/home/emericp/Documents/Progs/lms/src/av/AvInfo.cpp	/^getMetaDataFromDictionnary(AVDictionary* dictionnary, std::map<std::string, std::string>& res)$/;"	f	language:C++	namespace:Av
getOffset	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		boost::posix_time::time_duration	getOffset(void) const { return _offset; }$/;"	f	language:C++	class:Av::TranscodeParameters
getPath	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^		boost::filesystem::path			getPath() const {return _p;};$/;"	f	language:C++	class:Av::MediaFile
getSelectedStreamIds	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		std::vector<int>			getSelectedStreamIds(void) const { return _selectedStreams; }$/;"	f	language:C++	class:Av::TranscodeParameters
getStreams	/home/emericp/Documents/Progs/lms/src/av/AvInfo.cpp	/^MediaFile::getStreams(Stream::Type type) const$/;"	f	language:C++	class:Av::MediaFile
getStreams	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^		std::vector<Stream>	getStreams(Stream::Type type) const;$/;"	p	language:C++	class:Av::MediaFile
hasAttachedPictures	/home/emericp/Documents/Progs/lms/src/av/AvInfo.cpp	/^MediaFile::hasAttachedPictures(void) const$/;"	f	language:C++	class:Av::MediaFile
hasAttachedPictures	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^		bool			hasAttachedPictures(void) const;$/;"	p	language:C++	class:Av::MediaFile
id	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^	int		id;$/;"	m	language:C++	struct:Av::Stream
init	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.cpp	/^Transcoder::init()$/;"	f	language:C++	class:Av::Transcoder
init	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		static void init();$/;"	p	language:C++	class:Av::Transcoder
isComplete	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		bool isComplete(void);$/;"	p	language:C++	class:Av::Transcoder
killChild	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.cpp	/^Transcoder::killChild()$/;"	f	language:C++	class:Av::Transcoder
killChild	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		void killChild();$/;"	p	language:C++	class:Av::Transcoder
M4A	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^	M4A,$/;"	m	language:C++	class:Av::Encoding
M4V	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^	M4V,$/;"	m	language:C++	class:Av::Encoding
MediaFile	/home/emericp/Documents/Progs/lms/src/av/AvInfo.cpp	/^MediaFile::MediaFile(const boost::filesystem::path& p)$/;"	f	language:C++	class:Av::MediaFile
MediaFile	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^		MediaFile(const boost::filesystem::path& p);$/;"	p	language:C++	class:Av::MediaFile
MediaFile	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^class MediaFile$/;"	c	language:C++	namespace:Av
mimeType	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^	std::string mimeType;$/;"	m	language:C++	struct:Av::Picture
MP3	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^	MP3,$/;"	m	language:C++	class:Av::Encoding
OGA	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^	OGA,$/;"	m	language:C++	class:Av::Encoding
OGV	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^	OGV,$/;"	m	language:C++	class:Av::Encoding
open	/home/emericp/Documents/Progs/lms/src/av/AvInfo.cpp	/^MediaFile::open(void)$/;"	f	language:C++	class:Av::MediaFile
open	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^		bool open(void);$/;"	p	language:C++	class:Av::MediaFile
Picture	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^struct Picture$/;"	s	language:C++	namespace:Av
process	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.cpp	/^Transcoder::process(std::vector<unsigned char>& output, std::size_t maxSize)$/;"	f	language:C++	class:Av::Transcoder
process	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		void process(std::vector<unsigned char>& output, std::size_t maxSize);$/;"	p	language:C++	class:Av::Transcoder
scan	/home/emericp/Documents/Progs/lms/src/av/AvInfo.cpp	/^MediaFile::scan(void)$/;"	f	language:C++	class:Av::MediaFile
scan	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^		bool scan(void);$/;"	p	language:C++	class:Av::MediaFile
setBitrate	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		void setBitrate(Stream::Type type, std::size_t bitrate)	{ _outputBitrate[type] = bitrate; }$/;"	f	language:C++	class:Av::TranscodeParameters
setEncoding	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		void setEncoding(Encoding encoding)		{ _encoding = encoding; }$/;"	f	language:C++	class:Av::TranscodeParameters
setFile	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		void setFile(boost::filesystem::path p)		{_path = p; }$/;"	f	language:C++	class:Av::TranscodeParameters
setOffset	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		void setOffset(boost::posix_time::time_duration offset)	{_offset = offset; }$/;"	f	language:C++	class:Av::TranscodeParameters
start	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.cpp	/^Transcoder::start()$/;"	f	language:C++	class:Av::Transcoder
start	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		bool start();$/;"	p	language:C++	class:Av::Transcoder
Stream	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^struct Stream$/;"	s	language:C++	namespace:Av
streamType_to_string	/home/emericp/Documents/Progs/lms/src/av/AvInfo.cpp	/^static std::string streamType_to_string(Stream::Type type)$/;"	f	language:C++	namespace:Av
Subtitle	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^		Subtitle,$/;"	m	language:C++	class:Av::Stream::Type
TranscodeParameters	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^class TranscodeParameters$/;"	c	language:C++	namespace:Av
Transcoder	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.cpp	/^Transcoder::Transcoder(TrasncodeParameters parameters)$/;"	f	language:C++	class:Av::Transcoder
Transcoder	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		Transcoder(TranscodeParameters parameters);$/;"	p	language:C++	class:Av::Transcoder
Transcoder	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^class Transcoder$/;"	c	language:C++	namespace:Av
Type	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^	enum class Type$/;"	c	language:C++	struct:Av::Stream
type	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^	Type		type;$/;"	m	language:C++	struct:Av::Stream
Video	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^		Video,$/;"	m	language:C++	class:Av::Stream::Type
waitChild	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.cpp	/^Transcoder::waitChild()$/;"	f	language:C++	class:Av::Transcoder
waitChild	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		void waitChild();$/;"	p	language:C++	class:Av::Transcoder
WEBMA	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^	WEBMA,$/;"	m	language:C++	class:Av::Encoding
WEBMV	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^	WEBMV,$/;"	m	language:C++	class:Av::Encoding
_avConvPath	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.cpp	/^boost::filesystem::path	Transcoder::_avConvPath = boost::filesystem::path();$/;"	m	language:C++	class:Av::Transcoder	file:
_avConvPath	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		static boost::filesystem::path _avConvPath;$/;"	m	language:C++	class:Av::Transcoder
_child	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		std::shared_ptr<boost::process::child>	_child;$/;"	m	language:C++	class:Av::Transcoder
_context	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^		AVFormatContext* _context;$/;"	m	language:C++	class:Av::MediaFile
_encoding	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		Encoding				_encoding = Encoding::MP3;$/;"	m	language:C++	class:Av::TranscodeParameters
_in	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		std::istream		_in;$/;"	m	language:C++	class:Av::Transcoder
_is	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		boost::iostreams::stream_buffer<boost::iostreams::file_descriptor_source> _is;$/;"	m	language:C++	class:Av::Transcoder
_isComplete	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		bool		_isComplete;$/;"	m	language:C++	class:Av::Transcoder
_mutex	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.cpp	/^boost::mutex	Transcoder::_mutex;$/;"	m	language:C++	class:Av::Transcoder	file:
_mutex	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		static boost::mutex     _mutex;$/;"	m	language:C++	class:Av::Transcoder
_offset	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		boost::posix_time::time_duration	_offset = boost::posix_time::seconds(0);$/;"	m	language:C++	class:Av::TranscodeParameters
_outputBitrate	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		std::map<Stream::Type, std::size_t>	_outputBitrate = { {Stream::Type::Audio, 0}, { Stream::Type::Video, 0}, { Stream::Type::Subtitle, 0} };$/;"	m	language:C++	class:Av::TranscodeParameters
_outputPipe	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		boost::process::pipe _outputPipe;$/;"	m	language:C++	class:Av::Transcoder
_p	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^		boost::filesystem::path	_p;$/;"	m	language:C++	class:Av::MediaFile
_parameters	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		TranscodeParameters	_parameters;$/;"	m	language:C++	class:Av::Transcoder
_path	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		boost::filesystem::path			_path;$/;"	m	language:C++	class:Av::TranscodeParameters
_selectedStreams	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		std::vector<int>			_selectedStreams;$/;"	m	language:C++	class:Av::TranscodeParameters
_source	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.hpp	/^		boost::iostreams::file_descriptor_source _source;$/;"	m	language:C++	class:Av::Transcoder
__STDC_CONSTANT_MACROS	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	27;"	d	language:C++
~MediaFile	/home/emericp/Documents/Progs/lms/src/av/AvInfo.cpp	/^MediaFile::~MediaFile()$/;"	f	language:C++	class:Av::MediaFile
~MediaFile	/home/emericp/Documents/Progs/lms/src/av/AvInfo.hpp	/^		~MediaFile();$/;"	p	language:C++	class:Av::MediaFile
~Transcoder	/home/emericp/Documents/Progs/lms/src/av/AvTranscoder.cpp	/^Transcoder::~Transcoder()$/;"	f	language:C++	class:Av::Transcoder
