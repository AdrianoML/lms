/*
 * Copyright (C) 2014 Emeric Poupon
 *
 * This file is part of LMS.
 *
 * LMS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * LMS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with LMS.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "FilterChain.hpp"

namespace UserInterface {
namespace Desktop {


FilterChain::FilterChain()
: _refreshingFilters(false)
{
	addFilter(&_keywordSearchFilter);
}

void
FilterChain::addFilter(Filter* filter)
{
	filter->update().connect(boost::bind(&FilterChain::updateFilters, this, _filters.size()));
	_filters.push_back(filter);
}

void
FilterChain::searchKeyword(const std::string& text)
{
	_keywordSearchFilter.setText(text);
}

void
FilterChain::updateFilters(std::size_t startIdx)
{
	// Prevent loops
	if (_refreshingFilters)
		return;

	_refreshingFilters = true;

	Database::SearchFilter searchFilter;

	for (std::size_t idFilter = 0; idFilter < _filters.size(); ++idFilter)
	{
		Filter* filter = _filters.at(idFilter);

		// Apply contraints created by previous filters
		if (idFilter > startIdx) {
			filter->refresh(searchFilter);
		}

		// Get constraints generated by this filter
		// (Note: adding accross successive calls)
		filter->getConstraint(searchFilter);
	}

	_refreshingFilters = false;
}

} // namespace Desktop
} // namespace UserInterface

